
periodic_multitasking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006158  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f0  080063f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f8  080063f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063fc  080063fc  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ed8  20000010  08006410  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ee8  08006410  00024ee8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018754  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003245  00000000  00000000  00038792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  0003cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003175  00000000  00000000  0003dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001534a  00000000  00000000  00040e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd039  00000000  00000000  0005618f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001531c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  00153218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08006340 	.word	0x08006340

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08006340 	.word	0x08006340

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fbc9 	bl	8000cde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f828 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8f0 	bl	8000734 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f890 	bl	8000678 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000558:	f000 f8be 	bl	80006d8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f003 f918 	bl	8003790 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ToggleGreenTask */
  ToggleGreenTaskHandle = osThreadNew(ToggleGreenHook, NULL, &ToggleGreenTask_attributes);
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <main+0x44>)
 8000562:	2100      	movs	r1, #0
 8000564:	4809      	ldr	r0, [pc, #36]	; (800058c <main+0x48>)
 8000566:	f003 f97d 	bl	8003864 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <main+0x4c>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of ToggleRedTask */
  ToggleRedTaskHandle = osThreadNew(ToggleRedHook, NULL, &ToggleRedTask_attributes);
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <main+0x50>)
 8000572:	2100      	movs	r1, #0
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <main+0x54>)
 8000576:	f003 f975 	bl	8003864 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <main+0x58>)
 800057e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000580:	f003 f93a 	bl	80037f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x40>
 8000586:	bf00      	nop
 8000588:	08006390 	.word	0x08006390
 800058c:	0800094d 	.word	0x0800094d
 8000590:	20000594 	.word	0x20000594
 8000594:	080063b4 	.word	0x080063b4
 8000598:	0800099d 	.word	0x0800099d
 800059c:	20000598 	.word	0x20000598

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 febe 	bl	8006330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c4:	f001 f80c 	bl	80015e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <SystemClock_Config+0xd0>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <SystemClock_Config+0xd4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <SystemClock_Config+0xd4>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <SystemClock_Config+0xd4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000600:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000604:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000618:	2304      	movs	r3, #4
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4618      	mov	r0, r3
 800062a:	f000 ffe9 	bl	8001600 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000634:	f000 f9de 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000644:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800064a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2101      	movs	r1, #1
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fa80 	bl	8001b5c <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000662:	f000 f9c7 	bl	80009f4 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART3_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART3_UART_Init+0x58>)
 80006bc:	f002 f89c 	bl	80027f8 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f995 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000002c 	.word	0x2000002c
 80006d4:	40004800 	.word	0x40004800

080006d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e6:	2206      	movs	r2, #6
 80006e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2201      	movs	r2, #1
 8000700:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	2201      	movs	r2, #1
 8000712:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	f000 fe25 	bl	800136a <HAL_PCD_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000726:	f000 f965 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000b4 	.word	0x200000b4

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b7b      	ldr	r3, [pc, #492]	; (8000938 <MX_GPIO_Init+0x204>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a7a      	ldr	r2, [pc, #488]	; (8000938 <MX_GPIO_Init+0x204>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b78      	ldr	r3, [pc, #480]	; (8000938 <MX_GPIO_Init+0x204>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b75      	ldr	r3, [pc, #468]	; (8000938 <MX_GPIO_Init+0x204>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a74      	ldr	r2, [pc, #464]	; (8000938 <MX_GPIO_Init+0x204>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b72      	ldr	r3, [pc, #456]	; (8000938 <MX_GPIO_Init+0x204>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b6f      	ldr	r3, [pc, #444]	; (8000938 <MX_GPIO_Init+0x204>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a6e      	ldr	r2, [pc, #440]	; (8000938 <MX_GPIO_Init+0x204>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <MX_GPIO_Init+0x204>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b69      	ldr	r3, [pc, #420]	; (8000938 <MX_GPIO_Init+0x204>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a68      	ldr	r2, [pc, #416]	; (8000938 <MX_GPIO_Init+0x204>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b66      	ldr	r3, [pc, #408]	; (8000938 <MX_GPIO_Init+0x204>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b63      	ldr	r3, [pc, #396]	; (8000938 <MX_GPIO_Init+0x204>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a62      	ldr	r2, [pc, #392]	; (8000938 <MX_GPIO_Init+0x204>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b60      	ldr	r3, [pc, #384]	; (8000938 <MX_GPIO_Init+0x204>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c2:	4b5d      	ldr	r3, [pc, #372]	; (8000938 <MX_GPIO_Init+0x204>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a5c      	ldr	r2, [pc, #368]	; (8000938 <MX_GPIO_Init+0x204>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b5a      	ldr	r3, [pc, #360]	; (8000938 <MX_GPIO_Init+0x204>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, redLED_Pin|yellowLED_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2103      	movs	r1, #3
 80007de:	4857      	ldr	r0, [pc, #348]	; (800093c <MX_GPIO_Init+0x208>)
 80007e0:	f000 fd90 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, blueLED_Pin|greenLED_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2103      	movs	r1, #3
 80007e8:	4855      	ldr	r0, [pc, #340]	; (8000940 <MX_GPIO_Init+0x20c>)
 80007ea:	f000 fd8b 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4853      	ldr	r0, [pc, #332]	; (8000944 <MX_GPIO_Init+0x210>)
 80007f6:	f000 fd85 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4852      	ldr	r0, [pc, #328]	; (8000948 <MX_GPIO_Init+0x214>)
 8000800:	f000 fd80 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4848      	ldr	r0, [pc, #288]	; (800093c <MX_GPIO_Init+0x208>)
 800081c:	f000 fbc6 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : redLED_Pin yellowLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin|yellowLED_Pin;
 8000820:	2303      	movs	r3, #3
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4841      	ldr	r0, [pc, #260]	; (800093c <MX_GPIO_Init+0x208>)
 8000838:	f000 fbb8 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : blueLED_Pin greenLED_Pin */
  GPIO_InitStruct.Pin = blueLED_Pin|greenLED_Pin;
 800083c:	2303      	movs	r3, #3
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	483b      	ldr	r0, [pc, #236]	; (8000940 <MX_GPIO_Init+0x20c>)
 8000854:	f000 fbaa 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000858:	2384      	movs	r3, #132	; 0x84
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	230b      	movs	r3, #11
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4833      	ldr	r0, [pc, #204]	; (8000940 <MX_GPIO_Init+0x20c>)
 8000874:	f000 fb9a 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000878:	2330      	movs	r3, #48	; 0x30
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000888:	230b      	movs	r3, #11
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	482a      	ldr	r0, [pc, #168]	; (800093c <MX_GPIO_Init+0x208>)
 8000894:	f000 fb8a 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000898:	f244 0381 	movw	r3, #16513	; 0x4081
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4824      	ldr	r0, [pc, #144]	; (8000944 <MX_GPIO_Init+0x210>)
 80008b2:	f000 fb7b 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c8:	230b      	movs	r3, #11
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	481c      	ldr	r0, [pc, #112]	; (8000944 <MX_GPIO_Init+0x210>)
 80008d4:	f000 fb6a 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4816      	ldr	r0, [pc, #88]	; (8000948 <MX_GPIO_Init+0x214>)
 80008f0:	f000 fb5c 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4810      	ldr	r0, [pc, #64]	; (8000948 <MX_GPIO_Init+0x214>)
 8000908:	f000 fb50 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800090c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091e:	230b      	movs	r3, #11
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_GPIO_Init+0x214>)
 800092a:	f000 fb3f 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	; 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020800 	.word	0x40020800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40021800 	.word	0x40021800

0800094c <ToggleGreenHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ToggleGreenHook */
void ToggleGreenHook(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int count;
  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(tickcount_6s);
 8000954:	f241 7370 	movw	r3, #6000	; 0x1770
 8000958:	4618      	mov	r0, r3
 800095a:	f003 ffc5 	bl	80048e8 <vTaskDelay>
	HAL_GPIO_WritePin(blueLED_GPIO_Port, blueLED_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2101      	movs	r1, #1
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <ToggleGreenHook+0x4c>)
 8000964:	f000 fcce 	bl	8001304 <HAL_GPIO_WritePin>

	for (count = 0; count < 80; ++count) {
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	e00a      	b.n	8000984 <ToggleGreenHook+0x38>
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 800096e:	2102      	movs	r1, #2
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <ToggleGreenHook+0x4c>)
 8000972:	f000 fce0 	bl	8001336 <HAL_GPIO_TogglePin>
		vTaskDelay(tickcount_50ms);
 8000976:	2332      	movs	r3, #50	; 0x32
 8000978:	4618      	mov	r0, r3
 800097a:	f003 ffb5 	bl	80048e8 <vTaskDelay>
	for (count = 0; count < 80; ++count) {
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b4f      	cmp	r3, #79	; 0x4f
 8000988:	ddf1      	ble.n	800096e <ToggleGreenHook+0x22>
	}

	HAL_GPIO_WritePin(blueLED_GPIO_Port, blueLED_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2101      	movs	r1, #1
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <ToggleGreenHook+0x4c>)
 8000990:	f000 fcb8 	bl	8001304 <HAL_GPIO_WritePin>
	vTaskDelay(tickcount_6s);
 8000994:	e7de      	b.n	8000954 <ToggleGreenHook+0x8>
 8000996:	bf00      	nop
 8000998:	40020000 	.word	0x40020000

0800099c <ToggleRedHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ToggleRedHook */
void ToggleRedHook(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ToggleRedHook */
	int count;
  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(tickcount_6s);
 80009a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 ff9d 	bl	80048e8 <vTaskDelay>
	HAL_GPIO_WritePin(yellowLED_GPIO_Port, yellowLED_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2102      	movs	r1, #2
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <ToggleRedHook+0x54>)
 80009b4:	f000 fca6 	bl	8001304 <HAL_GPIO_WritePin>

	for (count = 0; count < 40; ++count) {
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e00a      	b.n	80009d4 <ToggleRedHook+0x38>
		HAL_GPIO_TogglePin(redLED_GPIO_Port, redLED_Pin);
 80009be:	2101      	movs	r1, #1
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <ToggleRedHook+0x54>)
 80009c2:	f000 fcb8 	bl	8001336 <HAL_GPIO_TogglePin>
		vTaskDelay(tickcount_50ms);
 80009c6:	2332      	movs	r3, #50	; 0x32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 ff8d 	bl	80048e8 <vTaskDelay>
	for (count = 0; count < 40; ++count) {
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b27      	cmp	r3, #39	; 0x27
 80009d8:	ddf1      	ble.n	80009be <ToggleRedHook+0x22>
	}

	HAL_GPIO_WritePin(yellowLED_GPIO_Port, yellowLED_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2102      	movs	r1, #2
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <ToggleRedHook+0x54>)
 80009e0:	f000 fc90 	bl	8001304 <HAL_GPIO_WritePin>
	vTaskDelay(tickcount_2s);
 80009e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 ff7d 	bl	80048e8 <vTaskDelay>
	vTaskDelay(tickcount_6s);
 80009ee:	e7d9      	b.n	80009a4 <ToggleRedHook+0x8>
 80009f0:	40020800 	.word	0x40020800

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f000 fa8c 	bl	8000f5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ae      	sub	sp, #184	; 0xb8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2290      	movs	r2, #144	; 0x90
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fc5d 	bl	8006330 <memset>
  if(huart->Instance==USART3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <HAL_UART_MspInit+0xb4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d13c      	bne.n	8000afa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fa8a 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9a:	f7ff ffab 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_UART_MspInit+0xb8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_UART_MspInit+0xb8>)
 8000aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0xb8>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_UART_MspInit+0xb8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <HAL_UART_MspInit+0xb8>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_UART_MspInit+0xb8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ace:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_UART_MspInit+0xbc>)
 8000af6:	f000 fa59 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	37b8      	adds	r7, #184	; 0xb8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004800 	.word	0x40004800
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020c00 	.word	0x40020c00

08000b10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0ae      	sub	sp, #184	; 0xb8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2290      	movs	r2, #144	; 0x90
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 fbfd 	bl	8006330 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b3e:	d166      	bne.n	8000c0e <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b46:	23c0      	movs	r3, #192	; 0xc0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b52:	2303      	movs	r3, #3
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fa1c 	bl	8001fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000b76:	f7ff ff3d 	bl	80009f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bac:	230a      	movs	r3, #10
 8000bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <HAL_PCD_MspInit+0x10c>)
 8000bba:	f000 f9f7 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <HAL_PCD_MspInit+0x10c>)
 8000bda:	f000 f9e7 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_PCD_MspInit+0x108>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	37b8      	adds	r7, #184	; 0xb8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f882 	bl	8000d58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c54:	f004 fadc 	bl	8005210 <xTaskGetSchedulerState>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c5e:	f005 f8bb 	bl	8005dd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c90:	f7ff ffea 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	; (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f005 fb07 	bl	80062cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc41 	bl	8000544 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cd0:	08006400 	.word	0x08006400
  ldr r2, =_sbss
 8000cd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cd8:	20004ee8 	.word	0x20004ee8

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>

08000cde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f000 f92e 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f000 f805 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff fe87 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f93b 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f911 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	2000059c 	.word	0x2000059c

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000059c 	.word	0x2000059c

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	05fa0000 	.word	0x05fa0000

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff47 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff5c 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb0 	bl	8000f00 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e175      	b.n	80012b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8164 	bne.w	80012b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x56>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80be 	beq.w	80012b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a65      	ldr	r2, [pc, #404]	; (80012d0 <HAL_GPIO_Init+0x324>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b63      	ldr	r3, [pc, #396]	; (80012d0 <HAL_GPIO_Init+0x324>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800114e:	4a61      	ldr	r2, [pc, #388]	; (80012d4 <HAL_GPIO_Init+0x328>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_GPIO_Init+0x32c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d037      	beq.n	80011ea <HAL_GPIO_Init+0x23e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_GPIO_Init+0x330>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d031      	beq.n	80011e6 <HAL_GPIO_Init+0x23a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_GPIO_Init+0x334>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x236>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <HAL_GPIO_Init+0x338>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x232>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a54      	ldr	r2, [pc, #336]	; (80012e8 <HAL_GPIO_Init+0x33c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x22e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a53      	ldr	r2, [pc, #332]	; (80012ec <HAL_GPIO_Init+0x340>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x22a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x344>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x348>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x34c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x350>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x21a>
 80011c2:	2309      	movs	r3, #9
 80011c4:	e012      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011c6:	230a      	movs	r3, #10
 80011c8:	e010      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ca:	2308      	movs	r3, #8
 80011cc:	e00e      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011fc:	4935      	ldr	r1, [pc, #212]	; (80012d4 <HAL_GPIO_Init+0x328>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_GPIO_Init+0x354>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <HAL_GPIO_Init+0x354>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <HAL_GPIO_Init+0x354>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x354>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_GPIO_Init+0x354>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae86 	bls.w	8000fcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40022400 	.word	0x40022400
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43d9      	mvns	r1, r3
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	400b      	ands	r3, r1
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af02      	add	r7, sp, #8
 8001370:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e108      	b.n	800158e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fbba 	bl	8000b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d102      	bne.n	80013b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 ff46 	bl	8003248 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7c1a      	ldrb	r2, [r3, #16]
 80013c4:	f88d 2000 	strb.w	r2, [sp]
 80013c8:	3304      	adds	r3, #4
 80013ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013cc:	f001 fee2 	bl	8003194 <USB_CoreInit>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2202      	movs	r2, #2
 80013da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0d5      	b.n	800158e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 ff3e 	bl	800326a <USB_SetCurrentMode>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0c6      	b.n	800158e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e04a      	b.n	800149c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	3315      	adds	r3, #21
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3314      	adds	r3, #20
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	b298      	uxth	r0, r3
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	332e      	adds	r3, #46	; 0x2e
 8001442:	4602      	mov	r2, r0
 8001444:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	3318      	adds	r3, #24
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	331c      	adds	r3, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	3320      	adds	r3, #32
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	3324      	adds	r3, #36	; 0x24
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3301      	adds	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3af      	bcc.n	8001406 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e044      	b.n	8001536 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f203 2355 	addw	r3, r3, #597	; 0x255
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	3301      	adds	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3b5      	bcc.n	80014ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c1a      	ldrb	r2, [r3, #16]
 8001548:	f88d 2000 	strb.w	r2, [sp]
 800154c:	3304      	adds	r3, #4
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	f001 fed8 	bl	8003304 <USB_DevInit>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e013      	b.n	800158e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d102      	bne.n	8001582 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f80b 	bl	8001598 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 f893 	bl	80036b2 <USB_DevDisconnect>

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_PCDEx_ActivateLPM+0x44>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	10000003 	.word	0x10000003

080015e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000

08001600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e29b      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8087 	beq.w	8001732 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001624:	4b96      	ldr	r3, [pc, #600]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b04      	cmp	r3, #4
 800162e:	d00c      	beq.n	800164a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001630:	4b93      	ldr	r3, [pc, #588]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d112      	bne.n	8001662 <HAL_RCC_OscConfig+0x62>
 800163c:	4b90      	ldr	r3, [pc, #576]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001648:	d10b      	bne.n	8001662 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164a:	4b8d      	ldr	r3, [pc, #564]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d06c      	beq.n	8001730 <HAL_RCC_OscConfig+0x130>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d168      	bne.n	8001730 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e275      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x7a>
 800166c:	4b84      	ldr	r3, [pc, #528]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a83      	ldr	r2, [pc, #524]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e02e      	b.n	80016d8 <HAL_RCC_OscConfig+0xd8>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x9c>
 8001682:	4b7f      	ldr	r3, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7e      	ldr	r2, [pc, #504]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7b      	ldr	r2, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xd8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0xc0>
 80016a6:	4b76      	ldr	r3, [pc, #472]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a75      	ldr	r2, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a72      	ldr	r2, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xd8>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b6c      	ldr	r3, [pc, #432]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6b      	ldr	r2, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb4e 	bl	8000d80 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fb4a 	bl	8000d80 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e229      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xe8>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fb3a 	bl	8000d80 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fb36 	bl	8000d80 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e215      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x110>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d069      	beq.n	8001812 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800173e:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x190>
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x17a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1e9      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	493d      	ldr	r1, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e040      	b.n	8001812 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a38      	ldr	r2, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff faec 	bl	8000d80 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fae8 	bl	8000d80 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1c7      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4929      	ldr	r1, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a26      	ldr	r2, [pc, #152]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fac8 	bl	8000d80 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fac4 	bl	8000d80 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1a3      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d038      	beq.n	8001890 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff faa5 	bl	8000d80 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183a:	f7ff faa1 	bl	8000d80 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e180      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800184e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x23a>
 8001858:	e01a      	b.n	8001890 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 800185c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff fa8b 	bl	8000d80 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fa87 	bl	8000d80 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d903      	bls.n	8001884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e166      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
 8001880:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a4 	beq.w	80019e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b8c      	ldr	r3, [pc, #560]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10d      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a88      	ldr	r2, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b86      	ldr	r3, [pc, #536]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	4b83      	ldr	r3, [pc, #524]	; (8001ad4 <HAL_RCC_OscConfig+0x4d4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018d2:	4b80      	ldr	r3, [pc, #512]	; (8001ad4 <HAL_RCC_OscConfig+0x4d4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <HAL_RCC_OscConfig+0x4d4>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff fa4f 	bl	8000d80 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7ff fa4b 	bl	8000d80 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e12a      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <HAL_RCC_OscConfig+0x4d4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x31a>
 800190c:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a6f      	ldr	r2, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	e02d      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x33c>
 8001922:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	e01c      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x35e>
 8001944:	4b62      	ldr	r3, [pc, #392]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a61      	ldr	r2, [pc, #388]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a5e      	ldr	r2, [pc, #376]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
 800195e:	4b5c      	ldr	r3, [pc, #368]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a5b      	ldr	r2, [pc, #364]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f9ff 	bl	8000d80 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff f9fb 	bl	8000d80 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0d8      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ee      	beq.n	8001986 <HAL_RCC_OscConfig+0x386>
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff f9e9 	bl	8000d80 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f9e5 	bl	8000d80 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0c2      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a3c      	ldr	r2, [pc, #240]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80019e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80ae 	beq.w	8001b4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d06d      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d14b      	bne.n	8001a9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f9b6 	bl	8000d80 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f9b2 	bl	8000d80 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e091      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	019b      	lsls	r3, r3, #6
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	071b      	lsls	r3, r3, #28
 8001a62:	491b      	ldr	r1, [pc, #108]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f984 	bl	8000d80 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff f980 	bl	8000d80 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e05f      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x47c>
 8001a9a:	e057      	b.n	8001b4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f96a 	bl	8000d80 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f966 	bl	8000d80 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e045      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_OscConfig+0x4d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4b0>
 8001ace:	e03d      	b.n	8001b4c <HAL_RCC_OscConfig+0x54c>
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_RCC_OscConfig+0x558>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d030      	beq.n	8001b48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d129      	bne.n	8001b48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d122      	bne.n	8001b48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d119      	bne.n	8001b48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d10f      	bne.n	8001b48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d0      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d910      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 020f 	bic.w	r2, r3, #15
 8001b8a:	4965      	ldr	r1, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0b8      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	494d      	ldr	r1, [pc, #308]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d040      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e073      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06b      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4936      	ldr	r1, [pc, #216]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c50:	f7ff f896 	bl	8000d80 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff f892 	bl	8000d80 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e053      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d210      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 020f 	bic.w	r2, r3, #15
 8001c96:	4922      	ldr	r1, [pc, #136]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e032      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4916      	ldr	r1, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cee:	f000 f821 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1cc>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1d0>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1d4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fff2 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	080063d8 	.word	0x080063d8
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d38:	b094      	sub	sp, #80	; 0x50
 8001d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d40:	2300      	movs	r3, #0
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d4c:	4b79      	ldr	r3, [pc, #484]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d00d      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x40>
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	f200 80e1 	bhi.w	8001f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x34>
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d66:	e0db      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b73      	ldr	r3, [pc, #460]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d6c:	e0db      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d72:	e0d8      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d74:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	2200      	movs	r2, #0
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
 8001da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001da6:	4622      	mov	r2, r4
 8001da8:	462b      	mov	r3, r5
 8001daa:	f04f 0000 	mov.w	r0, #0
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	0159      	lsls	r1, r3, #5
 8001db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db8:	0150      	lsls	r0, r2, #5
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	1a51      	subs	r1, r2, r1
 8001dc2:	6139      	str	r1, [r7, #16]
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dd8:	4659      	mov	r1, fp
 8001dda:	018b      	lsls	r3, r1, #6
 8001ddc:	4651      	mov	r1, sl
 8001dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001de2:	4651      	mov	r1, sl
 8001de4:	018a      	lsls	r2, r1, #6
 8001de6:	4651      	mov	r1, sl
 8001de8:	ebb2 0801 	subs.w	r8, r2, r1
 8001dec:	4659      	mov	r1, fp
 8001dee:	eb63 0901 	sbc.w	r9, r3, r1
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e06:	4690      	mov	r8, r2
 8001e08:	4699      	mov	r9, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	eb18 0303 	adds.w	r3, r8, r3
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	462b      	mov	r3, r5
 8001e14:	eb49 0303 	adc.w	r3, r9, r3
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e26:	4629      	mov	r1, r5
 8001e28:	024b      	lsls	r3, r1, #9
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e30:	4621      	mov	r1, r4
 8001e32:	024a      	lsls	r2, r1, #9
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e44:	f7fe f9fc 	bl	8000240 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e50:	e058      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	464b      	mov	r3, r9
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	0159      	lsls	r1, r3, #5
 8001e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e7e:	0150      	lsls	r0, r2, #5
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4641      	mov	r1, r8
 8001e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	00eb      	lsls	r3, r5, #3
 8001eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eba:	00e2      	lsls	r2, r4, #3
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	4643      	mov	r3, r8
 8001ec2:	18e3      	adds	r3, r4, r3
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	eb45 0303 	adc.w	r3, r5, r3
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eda:	4629      	mov	r1, r5
 8001edc:	028b      	lsls	r3, r1, #10
 8001ede:	4621      	mov	r1, r4
 8001ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	028a      	lsls	r2, r1, #10
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	61fa      	str	r2, [r7, #28]
 8001ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef8:	f7fe f9a2 	bl	8000240 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f1e:	e002      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3750      	adds	r7, #80	; 0x50
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	00f42400 	.word	0x00f42400
 8001f3c:	007a1200 	.word	0x007a1200

08001f40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000

08001f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f5c:	f7ff fff0 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0a9b      	lsrs	r3, r3, #10
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4903      	ldr	r1, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	080063e8 	.word	0x080063e8

08001f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f84:	f7ff ffdc 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	0b5b      	lsrs	r3, r3, #13
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	4903      	ldr	r1, [pc, #12]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	080063e8 	.word	0x080063e8

08001fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d012      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fd0:	4b69      	ldr	r3, [pc, #420]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a68      	ldr	r2, [pc, #416]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fda:	6093      	str	r3, [r2, #8]
 8001fdc:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	4964      	ldr	r1, [pc, #400]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d017      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	4959      	ldr	r1, [pc, #356]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002020:	d101      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d017      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800203e:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	494a      	ldr	r1, [pc, #296]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205c:	d101      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 808b 	beq.w	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a39      	ldr	r2, [pc, #228]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a34      	ldr	r2, [pc, #208]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7fe fe66 	bl	8000d80 <HAL_GetTick>
 80020b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7fe fe62 	bl	8000d80 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e38f      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d035      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d02e      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d114      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe fe2a 	bl	8000d80 <HAL_GetTick>
 800212c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fe26 	bl	8000d80 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e351      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ee      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800215e:	d111      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800216e:	400b      	ands	r3, r1
 8002170:	4901      	ldr	r1, [pc, #4]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
 8002176:	e00b      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	0ffffcff 	.word	0x0ffffcff
 8002184:	4bac      	ldr	r3, [pc, #688]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4aab      	ldr	r2, [pc, #684]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	4ba9      	ldr	r3, [pc, #676]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	49a6      	ldr	r1, [pc, #664]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021ae:	4ba2      	ldr	r3, [pc, #648]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	4aa0      	ldr	r2, [pc, #640]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021be:	4b9e      	ldr	r3, [pc, #632]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c8:	499b      	ldr	r1, [pc, #620]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021dc:	4b96      	ldr	r3, [pc, #600]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	4993      	ldr	r1, [pc, #588]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021fe:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220c:	498a      	ldr	r1, [pc, #552]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002220:	4b85      	ldr	r3, [pc, #532]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222e:	4982      	ldr	r1, [pc, #520]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002242:	4b7d      	ldr	r3, [pc, #500]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4979      	ldr	r1, [pc, #484]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002264:	4b74      	ldr	r3, [pc, #464]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4971      	ldr	r1, [pc, #452]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002286:	4b6c      	ldr	r3, [pc, #432]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f023 020c 	bic.w	r2, r3, #12
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002294:	4968      	ldr	r1, [pc, #416]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	4960      	ldr	r1, [pc, #384]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d8:	4957      	ldr	r1, [pc, #348]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ec:	4b52      	ldr	r3, [pc, #328]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	494f      	ldr	r1, [pc, #316]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800230e:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	4946      	ldr	r1, [pc, #280]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	493e      	ldr	r1, [pc, #248]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	4935      	ldr	r1, [pc, #212]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002374:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002382:	492d      	ldr	r1, [pc, #180]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d011      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a4:	4924      	ldr	r1, [pc, #144]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b4:	d101      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e4:	4914      	ldr	r1, [pc, #80]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002408:	490b      	ldr	r1, [pc, #44]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00f      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242c:	4902      	ldr	r1, [pc, #8]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002434:	e002      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00b      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002448:	4b8a      	ldr	r3, [pc, #552]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	4986      	ldr	r1, [pc, #536]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800246c:	4b81      	ldr	r3, [pc, #516]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002472:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800247c:	497d      	ldr	r1, [pc, #500]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d006      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80d6 	beq.w	8002644 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002498:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a75      	ldr	r2, [pc, #468]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a4:	f7fe fc6c 	bl	8000d80 <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024ac:	f7fe fc68 	bl	8000d80 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e195      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024be:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d021      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d11d      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ec:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f2:	0e1b      	lsrs	r3, r3, #24
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	019a      	lsls	r2, r3, #6
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	071b      	lsls	r3, r3, #28
 8002512:	4958      	ldr	r1, [pc, #352]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02e      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002544:	d129      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002546:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002554:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255a:	0f1b      	lsrs	r3, r3, #28
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	019a      	lsls	r2, r3, #6
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	061b      	lsls	r3, r3, #24
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	493e      	ldr	r1, [pc, #248]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002582:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002588:	f023 021f 	bic.w	r2, r3, #31
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	3b01      	subs	r3, #1
 8002592:	4938      	ldr	r1, [pc, #224]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01d      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025a6:	4b33      	ldr	r3, [pc, #204]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ac:	0e1b      	lsrs	r3, r3, #24
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025b4:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ba:	0f1b      	lsrs	r3, r3, #28
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	019a      	lsls	r2, r3, #6
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	431a      	orrs	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	061b      	lsls	r3, r3, #24
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	4926      	ldr	r1, [pc, #152]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d011      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	019a      	lsls	r2, r3, #6
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	071b      	lsls	r3, r3, #28
 800260a:	491a      	ldr	r1, [pc, #104]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800261c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261e:	f7fe fbaf 	bl	8000d80 <HAL_GetTick>
 8002622:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002626:	f7fe fbab 	bl	8000d80 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0d8      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 80ce 	bne.w	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002658:	f7fe fb92 	bl	8000d80 <HAL_GetTick>
 800265c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800265e:	e00b      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002660:	f7fe fb8e 	bl	8000d80 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d904      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0bb      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002678:	4b5e      	ldr	r3, [pc, #376]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002684:	d0ec      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02e      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12a      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026bc:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	0f1b      	lsrs	r3, r3, #28
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	019a      	lsls	r2, r3, #6
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	061b      	lsls	r3, r3, #24
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	071b      	lsls	r3, r3, #28
 80026e2:	4944      	ldr	r1, [pc, #272]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	3b01      	subs	r3, #1
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	493d      	ldr	r1, [pc, #244]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d022      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002718:	d11d      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	0e1b      	lsrs	r3, r3, #24
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	0f1b      	lsrs	r3, r3, #28
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	019a      	lsls	r2, r3, #6
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	431a      	orrs	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	071b      	lsls	r3, r3, #28
 800274e:	4929      	ldr	r1, [pc, #164]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	0e1b      	lsrs	r3, r3, #24
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	019a      	lsls	r2, r3, #6
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	431a      	orrs	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	071b      	lsls	r3, r3, #28
 8002796:	4917      	ldr	r1, [pc, #92]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	4911      	ldr	r1, [pc, #68]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fade 	bl	8000d80 <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027c8:	f7fe fada 	bl	8000d80 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e007      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e6:	d1ef      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e040      	b.n	800288c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe f918 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa8c 	bl	8002d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f825 	bl	8002894 <UART_SetConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e01b      	b.n	800288c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fb0b 	bl	8002ea0 <UART_CheckIdleState>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4ba6      	ldr	r3, [pc, #664]	; (8002b58 <UART_SetConfig+0x2c4>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	6979      	ldr	r1, [r7, #20]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a94      	ldr	r2, [pc, #592]	; (8002b5c <UART_SetConfig+0x2c8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d120      	bne.n	8002952 <UART_SetConfig+0xbe>
 8002910:	4b93      	ldr	r3, [pc, #588]	; (8002b60 <UART_SetConfig+0x2cc>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d816      	bhi.n	800294c <UART_SetConfig+0xb8>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <UART_SetConfig+0x90>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002935 	.word	0x08002935
 8002928:	08002941 	.word	0x08002941
 800292c:	0800293b 	.word	0x0800293b
 8002930:	08002947 	.word	0x08002947
 8002934:	2301      	movs	r3, #1
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e150      	b.n	8002bdc <UART_SetConfig+0x348>
 800293a:	2302      	movs	r3, #2
 800293c:	77fb      	strb	r3, [r7, #31]
 800293e:	e14d      	b.n	8002bdc <UART_SetConfig+0x348>
 8002940:	2304      	movs	r3, #4
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e14a      	b.n	8002bdc <UART_SetConfig+0x348>
 8002946:	2308      	movs	r3, #8
 8002948:	77fb      	strb	r3, [r7, #31]
 800294a:	e147      	b.n	8002bdc <UART_SetConfig+0x348>
 800294c:	2310      	movs	r3, #16
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e144      	b.n	8002bdc <UART_SetConfig+0x348>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a83      	ldr	r2, [pc, #524]	; (8002b64 <UART_SetConfig+0x2d0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d132      	bne.n	80029c2 <UART_SetConfig+0x12e>
 800295c:	4b80      	ldr	r3, [pc, #512]	; (8002b60 <UART_SetConfig+0x2cc>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d828      	bhi.n	80029bc <UART_SetConfig+0x128>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <UART_SetConfig+0xdc>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	080029a5 	.word	0x080029a5
 8002974:	080029bd 	.word	0x080029bd
 8002978:	080029bd 	.word	0x080029bd
 800297c:	080029bd 	.word	0x080029bd
 8002980:	080029b1 	.word	0x080029b1
 8002984:	080029bd 	.word	0x080029bd
 8002988:	080029bd 	.word	0x080029bd
 800298c:	080029bd 	.word	0x080029bd
 8002990:	080029ab 	.word	0x080029ab
 8002994:	080029bd 	.word	0x080029bd
 8002998:	080029bd 	.word	0x080029bd
 800299c:	080029bd 	.word	0x080029bd
 80029a0:	080029b7 	.word	0x080029b7
 80029a4:	2300      	movs	r3, #0
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e118      	b.n	8002bdc <UART_SetConfig+0x348>
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e115      	b.n	8002bdc <UART_SetConfig+0x348>
 80029b0:	2304      	movs	r3, #4
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e112      	b.n	8002bdc <UART_SetConfig+0x348>
 80029b6:	2308      	movs	r3, #8
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e10f      	b.n	8002bdc <UART_SetConfig+0x348>
 80029bc:	2310      	movs	r3, #16
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e10c      	b.n	8002bdc <UART_SetConfig+0x348>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a68      	ldr	r2, [pc, #416]	; (8002b68 <UART_SetConfig+0x2d4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d120      	bne.n	8002a0e <UART_SetConfig+0x17a>
 80029cc:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <UART_SetConfig+0x2cc>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029d6:	2b30      	cmp	r3, #48	; 0x30
 80029d8:	d013      	beq.n	8002a02 <UART_SetConfig+0x16e>
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	d814      	bhi.n	8002a08 <UART_SetConfig+0x174>
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d009      	beq.n	80029f6 <UART_SetConfig+0x162>
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d810      	bhi.n	8002a08 <UART_SetConfig+0x174>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <UART_SetConfig+0x15c>
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d006      	beq.n	80029fc <UART_SetConfig+0x168>
 80029ee:	e00b      	b.n	8002a08 <UART_SetConfig+0x174>
 80029f0:	2300      	movs	r3, #0
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e0f2      	b.n	8002bdc <UART_SetConfig+0x348>
 80029f6:	2302      	movs	r3, #2
 80029f8:	77fb      	strb	r3, [r7, #31]
 80029fa:	e0ef      	b.n	8002bdc <UART_SetConfig+0x348>
 80029fc:	2304      	movs	r3, #4
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e0ec      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a02:	2308      	movs	r3, #8
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	e0e9      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a08:	2310      	movs	r3, #16
 8002a0a:	77fb      	strb	r3, [r7, #31]
 8002a0c:	e0e6      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a56      	ldr	r2, [pc, #344]	; (8002b6c <UART_SetConfig+0x2d8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d120      	bne.n	8002a5a <UART_SetConfig+0x1c6>
 8002a18:	4b51      	ldr	r3, [pc, #324]	; (8002b60 <UART_SetConfig+0x2cc>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a22:	2bc0      	cmp	r3, #192	; 0xc0
 8002a24:	d013      	beq.n	8002a4e <UART_SetConfig+0x1ba>
 8002a26:	2bc0      	cmp	r3, #192	; 0xc0
 8002a28:	d814      	bhi.n	8002a54 <UART_SetConfig+0x1c0>
 8002a2a:	2b80      	cmp	r3, #128	; 0x80
 8002a2c:	d009      	beq.n	8002a42 <UART_SetConfig+0x1ae>
 8002a2e:	2b80      	cmp	r3, #128	; 0x80
 8002a30:	d810      	bhi.n	8002a54 <UART_SetConfig+0x1c0>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <UART_SetConfig+0x1a8>
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d006      	beq.n	8002a48 <UART_SetConfig+0x1b4>
 8002a3a:	e00b      	b.n	8002a54 <UART_SetConfig+0x1c0>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e0cc      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a42:	2302      	movs	r3, #2
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	e0c9      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	e0c6      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	e0c3      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a54:	2310      	movs	r3, #16
 8002a56:	77fb      	strb	r3, [r7, #31]
 8002a58:	e0c0      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a44      	ldr	r2, [pc, #272]	; (8002b70 <UART_SetConfig+0x2dc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d125      	bne.n	8002ab0 <UART_SetConfig+0x21c>
 8002a64:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <UART_SetConfig+0x2cc>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a72:	d017      	beq.n	8002aa4 <UART_SetConfig+0x210>
 8002a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a78:	d817      	bhi.n	8002aaa <UART_SetConfig+0x216>
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7e:	d00b      	beq.n	8002a98 <UART_SetConfig+0x204>
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a84:	d811      	bhi.n	8002aaa <UART_SetConfig+0x216>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <UART_SetConfig+0x1fe>
 8002a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8e:	d006      	beq.n	8002a9e <UART_SetConfig+0x20a>
 8002a90:	e00b      	b.n	8002aaa <UART_SetConfig+0x216>
 8002a92:	2300      	movs	r3, #0
 8002a94:	77fb      	strb	r3, [r7, #31]
 8002a96:	e0a1      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e09e      	b.n	8002bdc <UART_SetConfig+0x348>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e09b      	b.n	8002bdc <UART_SetConfig+0x348>
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e098      	b.n	8002bdc <UART_SetConfig+0x348>
 8002aaa:	2310      	movs	r3, #16
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e095      	b.n	8002bdc <UART_SetConfig+0x348>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <UART_SetConfig+0x2e0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d125      	bne.n	8002b06 <UART_SetConfig+0x272>
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <UART_SetConfig+0x2cc>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ac8:	d017      	beq.n	8002afa <UART_SetConfig+0x266>
 8002aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ace:	d817      	bhi.n	8002b00 <UART_SetConfig+0x26c>
 8002ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad4:	d00b      	beq.n	8002aee <UART_SetConfig+0x25a>
 8002ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ada:	d811      	bhi.n	8002b00 <UART_SetConfig+0x26c>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <UART_SetConfig+0x254>
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae4:	d006      	beq.n	8002af4 <UART_SetConfig+0x260>
 8002ae6:	e00b      	b.n	8002b00 <UART_SetConfig+0x26c>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	77fb      	strb	r3, [r7, #31]
 8002aec:	e076      	b.n	8002bdc <UART_SetConfig+0x348>
 8002aee:	2302      	movs	r3, #2
 8002af0:	77fb      	strb	r3, [r7, #31]
 8002af2:	e073      	b.n	8002bdc <UART_SetConfig+0x348>
 8002af4:	2304      	movs	r3, #4
 8002af6:	77fb      	strb	r3, [r7, #31]
 8002af8:	e070      	b.n	8002bdc <UART_SetConfig+0x348>
 8002afa:	2308      	movs	r3, #8
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e06d      	b.n	8002bdc <UART_SetConfig+0x348>
 8002b00:	2310      	movs	r3, #16
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e06a      	b.n	8002bdc <UART_SetConfig+0x348>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <UART_SetConfig+0x2e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d138      	bne.n	8002b82 <UART_SetConfig+0x2ee>
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <UART_SetConfig+0x2cc>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b1e:	d017      	beq.n	8002b50 <UART_SetConfig+0x2bc>
 8002b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b24:	d82a      	bhi.n	8002b7c <UART_SetConfig+0x2e8>
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d00b      	beq.n	8002b44 <UART_SetConfig+0x2b0>
 8002b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b30:	d824      	bhi.n	8002b7c <UART_SetConfig+0x2e8>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <UART_SetConfig+0x2aa>
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	d006      	beq.n	8002b4a <UART_SetConfig+0x2b6>
 8002b3c:	e01e      	b.n	8002b7c <UART_SetConfig+0x2e8>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	77fb      	strb	r3, [r7, #31]
 8002b42:	e04b      	b.n	8002bdc <UART_SetConfig+0x348>
 8002b44:	2302      	movs	r3, #2
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e048      	b.n	8002bdc <UART_SetConfig+0x348>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	77fb      	strb	r3, [r7, #31]
 8002b4e:	e045      	b.n	8002bdc <UART_SetConfig+0x348>
 8002b50:	2308      	movs	r3, #8
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e042      	b.n	8002bdc <UART_SetConfig+0x348>
 8002b56:	bf00      	nop
 8002b58:	efff69f3 	.word	0xefff69f3
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40004400 	.word	0x40004400
 8002b68:	40004800 	.word	0x40004800
 8002b6c:	40004c00 	.word	0x40004c00
 8002b70:	40005000 	.word	0x40005000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	40007800 	.word	0x40007800
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e02c      	b.n	8002bdc <UART_SetConfig+0x348>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <UART_SetConfig+0x4bc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d125      	bne.n	8002bd8 <UART_SetConfig+0x344>
 8002b8c:	4b71      	ldr	r3, [pc, #452]	; (8002d54 <UART_SetConfig+0x4c0>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b9a:	d017      	beq.n	8002bcc <UART_SetConfig+0x338>
 8002b9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ba0:	d817      	bhi.n	8002bd2 <UART_SetConfig+0x33e>
 8002ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba6:	d00b      	beq.n	8002bc0 <UART_SetConfig+0x32c>
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	d811      	bhi.n	8002bd2 <UART_SetConfig+0x33e>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <UART_SetConfig+0x326>
 8002bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb6:	d006      	beq.n	8002bc6 <UART_SetConfig+0x332>
 8002bb8:	e00b      	b.n	8002bd2 <UART_SetConfig+0x33e>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e00d      	b.n	8002bdc <UART_SetConfig+0x348>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e00a      	b.n	8002bdc <UART_SetConfig+0x348>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e007      	b.n	8002bdc <UART_SetConfig+0x348>
 8002bcc:	2308      	movs	r3, #8
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e004      	b.n	8002bdc <UART_SetConfig+0x348>
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	77fb      	strb	r3, [r7, #31]
 8002bd6:	e001      	b.n	8002bdc <UART_SetConfig+0x348>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be4:	d15b      	bne.n	8002c9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d828      	bhi.n	8002c3e <UART_SetConfig+0x3aa>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <UART_SetConfig+0x360>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	08002c29 	.word	0x08002c29
 8002c00:	08002c3f 	.word	0x08002c3f
 8002c04:	08002c2f 	.word	0x08002c2f
 8002c08:	08002c3f 	.word	0x08002c3f
 8002c0c:	08002c3f 	.word	0x08002c3f
 8002c10:	08002c3f 	.word	0x08002c3f
 8002c14:	08002c37 	.word	0x08002c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c18:	f7ff f99e 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	61b8      	str	r0, [r7, #24]
        break;
 8002c1e:	e013      	b.n	8002c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c20:	f7ff f9ae 	bl	8001f80 <HAL_RCC_GetPCLK2Freq>
 8002c24:	61b8      	str	r0, [r7, #24]
        break;
 8002c26:	e00f      	b.n	8002c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <UART_SetConfig+0x4c4>)
 8002c2a:	61bb      	str	r3, [r7, #24]
        break;
 8002c2c:	e00c      	b.n	8002c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c2e:	f7ff f881 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8002c32:	61b8      	str	r0, [r7, #24]
        break;
 8002c34:	e008      	b.n	8002c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c3a:	61bb      	str	r3, [r7, #24]
        break;
 8002c3c:	e004      	b.n	8002c48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	77bb      	strb	r3, [r7, #30]
        break;
 8002c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d074      	beq.n	8002d38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	005a      	lsls	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	441a      	add	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	d916      	bls.n	8002c98 <UART_SetConfig+0x404>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c70:	d212      	bcs.n	8002c98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f023 030f 	bic.w	r3, r3, #15
 8002c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	89fb      	ldrh	r3, [r7, #14]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	89fa      	ldrh	r2, [r7, #14]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	e04f      	b.n	8002d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	77bb      	strb	r3, [r7, #30]
 8002c9c:	e04c      	b.n	8002d38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d828      	bhi.n	8002cf6 <UART_SetConfig+0x462>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <UART_SetConfig+0x418>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cd1 	.word	0x08002cd1
 8002cb0:	08002cd9 	.word	0x08002cd9
 8002cb4:	08002ce1 	.word	0x08002ce1
 8002cb8:	08002cf7 	.word	0x08002cf7
 8002cbc:	08002ce7 	.word	0x08002ce7
 8002cc0:	08002cf7 	.word	0x08002cf7
 8002cc4:	08002cf7 	.word	0x08002cf7
 8002cc8:	08002cf7 	.word	0x08002cf7
 8002ccc:	08002cef 	.word	0x08002cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd0:	f7ff f942 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 8002cd4:	61b8      	str	r0, [r7, #24]
        break;
 8002cd6:	e013      	b.n	8002d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7ff f952 	bl	8001f80 <HAL_RCC_GetPCLK2Freq>
 8002cdc:	61b8      	str	r0, [r7, #24]
        break;
 8002cde:	e00f      	b.n	8002d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <UART_SetConfig+0x4c4>)
 8002ce2:	61bb      	str	r3, [r7, #24]
        break;
 8002ce4:	e00c      	b.n	8002d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce6:	f7ff f825 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8002cea:	61b8      	str	r0, [r7, #24]
        break;
 8002cec:	e008      	b.n	8002d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf2:	61bb      	str	r3, [r7, #24]
        break;
 8002cf4:	e004      	b.n	8002d00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8002cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	085a      	lsrs	r2, r3, #1
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d909      	bls.n	8002d34 <UART_SetConfig+0x4a0>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d26:	d205      	bcs.n	8002d34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e001      	b.n	8002d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d44:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40007c00 	.word	0x40007c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400

08002d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01a      	beq.n	8002e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5a:	d10a      	bne.n	8002e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b098      	sub	sp, #96	; 0x60
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eb0:	f7fd ff66 	bl	8000d80 <HAL_GetTick>
 8002eb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d12e      	bne.n	8002f22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f88c 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d021      	beq.n	8002f22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
 8002efe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e6      	bne.n	8002ede <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e062      	b.n	8002fe8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d149      	bne.n	8002fc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f856 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d03c      	beq.n	8002fc4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	623b      	str	r3, [r7, #32]
   return(result);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
 8002f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e6      	bne.n	8002f4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3308      	adds	r3, #8
 8002f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3308      	adds	r3, #8
 8002f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9c:	61fa      	str	r2, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	69b9      	ldr	r1, [r7, #24]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e011      	b.n	8002fe8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3758      	adds	r7, #88	; 0x58
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003000:	e04f      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d04b      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300a:	f7fd feb9 	bl	8000d80 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	429a      	cmp	r2, r3
 8003018:	d302      	bcc.n	8003020 <UART_WaitOnFlagUntilTimeout+0x30>
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e04e      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d037      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d034      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d031      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d110      	bne.n	800306e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f838 	bl	80030ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2208      	movs	r2, #8
 800305e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e029      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307c:	d111      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f81e 	bl	80030ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e00f      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d0a0      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b095      	sub	sp, #84	; 0x54
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f0:	643b      	str	r3, [r7, #64]	; 0x40
 80030f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e6      	bne.n	80030d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3308      	adds	r3, #8
 800310a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	e853 3f00 	ldrex	r3, [r3]
 8003112:	61fb      	str	r3, [r7, #28]
   return(result);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	64bb      	str	r3, [r7, #72]	; 0x48
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3308      	adds	r3, #8
 8003122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003124:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e5      	bne.n	8003104 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313c:	2b01      	cmp	r3, #1
 800313e:	d118      	bne.n	8003172 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	60bb      	str	r3, [r7, #8]
   return(result);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f023 0310 	bic.w	r3, r3, #16
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6979      	ldr	r1, [r7, #20]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	613b      	str	r3, [r7, #16]
   return(result);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e6      	bne.n	8003140 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003186:	bf00      	nop
 8003188:	3754      	adds	r7, #84	; 0x54
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003194:	b084      	sub	sp, #16
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	f107 001c 	add.w	r0, r7, #28
 80031a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d121      	bne.n	80031f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <USB_CoreInit+0xb0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa92 	bl	8003710 <USB_CoreReset>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e010      	b.n	8003214 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa86 	bl	8003710 <USB_CoreReset>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003214:	7fbb      	ldrb	r3, [r7, #30]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10b      	bne.n	8003232 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f043 0206 	orr.w	r2, r3, #6
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003232:	7bfb      	ldrb	r3, [r7, #15]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800323e:	b004      	add	sp, #16
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	ffbdffbf 	.word	0xffbdffbf

08003248 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 0201 	bic.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d115      	bne.n	80032b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003298:	200a      	movs	r0, #10
 800329a:	f7fd fd7d 	bl	8000d98 <HAL_Delay>
      ms += 10U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	330a      	adds	r3, #10
 80032a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fa25 	bl	80036f4 <USB_GetMode>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d01e      	beq.n	80032ee <USB_SetCurrentMode+0x84>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2bc7      	cmp	r3, #199	; 0xc7
 80032b4:	d9f0      	bls.n	8003298 <USB_SetCurrentMode+0x2e>
 80032b6:	e01a      	b.n	80032ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80032ca:	200a      	movs	r0, #10
 80032cc:	f7fd fd64 	bl	8000d98 <HAL_Delay>
      ms += 10U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	330a      	adds	r3, #10
 80032d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa0c 	bl	80036f4 <USB_GetMode>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <USB_SetCurrentMode+0x84>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2bc7      	cmp	r3, #199	; 0xc7
 80032e6:	d9f0      	bls.n	80032ca <USB_SetCurrentMode+0x60>
 80032e8:	e001      	b.n	80032ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e005      	b.n	80032fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2bc8      	cmp	r3, #200	; 0xc8
 80032f2:	d101      	bne.n	80032f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003304:	b084      	sub	sp, #16
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e009      	b.n	8003338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	2200      	movs	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	3301      	adds	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b0e      	cmp	r3, #14
 800333c:	d9f2      	bls.n	8003324 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800333e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003342:	2b00      	cmp	r3, #0
 8003344:	d11c      	bne.n	8003380 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e005      	b.n	800338c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003392:	461a      	mov	r2, r3
 8003394:	2300      	movs	r3, #0
 8003396:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003398:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10d      	bne.n	80033bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80033a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f968 	bl	8003680 <USB_SetDevSpeed>
 80033b0:	e008      	b.n	80033c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033b2:	2101      	movs	r1, #1
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f963 	bl	8003680 <USB_SetDevSpeed>
 80033ba:	e003      	b.n	80033c4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033bc:	2103      	movs	r1, #3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f95e 	bl	8003680 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033c4:	2110      	movs	r1, #16
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8fa 	bl	80035c0 <USB_FlushTxFifo>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f924 	bl	8003624 <USB_FlushRxFifo>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ec:	461a      	mov	r2, r3
 80033ee:	2300      	movs	r3, #0
 80033f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f8:	461a      	mov	r2, r3
 80033fa:	2300      	movs	r3, #0
 80033fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003404:	461a      	mov	r2, r3
 8003406:	2300      	movs	r3, #0
 8003408:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	e043      	b.n	8003498 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003426:	d118      	bne.n	800345a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343a:	461a      	mov	r2, r3
 800343c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e013      	b.n	800346c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003450:	461a      	mov	r2, r3
 8003452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e008      	b.n	800346c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	461a      	mov	r2, r3
 8003468:	2300      	movs	r3, #0
 800346a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	2300      	movs	r3, #0
 800347c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348a:	461a      	mov	r2, r3
 800348c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3301      	adds	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800349c:	461a      	mov	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d3b5      	bcc.n	8003410 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e043      	b.n	8003532 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034c0:	d118      	bne.n	80034f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	461a      	mov	r2, r3
 80034d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e013      	b.n	8003506 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e008      	b.n	8003506 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	2300      	movs	r3, #0
 8003504:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003512:	461a      	mov	r2, r3
 8003514:	2300      	movs	r3, #0
 8003516:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800352a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	3301      	adds	r3, #1
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003536:	461a      	mov	r2, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4293      	cmp	r3, r2
 800353c:	d3b5      	bcc.n	80034aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003550:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800355e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f043 0210 	orr.w	r2, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <USB_DevInit+0x2b4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003580:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f043 0208 	orr.w	r2, r3, #8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003594:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <USB_DevInit+0x2b8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035b4:	b004      	add	sp, #16
 80035b6:	4770      	bx	lr
 80035b8:	803c3800 	.word	0x803c3800
 80035bc:	40000004 	.word	0x40000004

080035c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80035da:	d901      	bls.n	80035e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e01b      	b.n	8003618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	daf2      	bge.n	80035ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	019b      	lsls	r3, r3, #6
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003604:	d901      	bls.n	800360a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e006      	b.n	8003618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d0f0      	beq.n	80035f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800363c:	d901      	bls.n	8003642 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e018      	b.n	8003674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	daf2      	bge.n	8003630 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2210      	movs	r2, #16
 8003652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003660:	d901      	bls.n	8003666 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e006      	b.n	8003674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d0f0      	beq.n	8003654 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0301 	and.w	r3, r3, #1
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003728:	d901      	bls.n	800372e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e022      	b.n	8003774 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	daf2      	bge.n	800371c <USB_CoreReset+0xc>

  count = 10U;
 8003736:	230a      	movs	r3, #10
 8003738:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800373a:	e002      	b.n	8003742 <USB_CoreReset+0x32>
  {
    count--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3b01      	subs	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f9      	bne.n	800373c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003760:	d901      	bls.n	8003766 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e006      	b.n	8003774 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d0f0      	beq.n	8003754 <USB_CoreReset+0x44>

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003796:	f3ef 8305 	mrs	r3, IPSR
 800379a:	60bb      	str	r3, [r7, #8]
  return(result);
 800379c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	607b      	str	r3, [r7, #4]
  return(result);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037ae:	f3ef 8311 	mrs	r3, BASEPRI
 80037b2:	603b      	str	r3, [r7, #0]
  return(result);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <osKernelInitialize+0x3a>
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <osKernelInitialize+0x64>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d103      	bne.n	80037ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80037c2:	f06f 0305 	mvn.w	r3, #5
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e00c      	b.n	80037e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <osKernelInitialize+0x64>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <osKernelInitialize+0x64>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e002      	b.n	80037e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	200005a0 	.word	0x200005a0

080037f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037fe:	f3ef 8305 	mrs	r3, IPSR
 8003802:	60bb      	str	r3, [r7, #8]
  return(result);
 8003804:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380a:	f3ef 8310 	mrs	r3, PRIMASK
 800380e:	607b      	str	r3, [r7, #4]
  return(result);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003816:	f3ef 8311 	mrs	r3, BASEPRI
 800381a:	603b      	str	r3, [r7, #0]
  return(result);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <osKernelStart+0x3a>
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <osKernelStart+0x68>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d103      	bne.n	8003832 <osKernelStart+0x3a>
    stat = osErrorISR;
 800382a:	f06f 0305 	mvn.w	r3, #5
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e010      	b.n	8003854 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <osKernelStart+0x68>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d109      	bne.n	800384e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800383a:	f7ff ffa1 	bl	8003780 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <osKernelStart+0x68>)
 8003840:	2202      	movs	r2, #2
 8003842:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003844:	f001 f886 	bl	8004954 <vTaskStartScheduler>
      stat = osOK;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e002      	b.n	8003854 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003854:	68fb      	ldr	r3, [r7, #12]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200005a0 	.word	0x200005a0

08003864 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b090      	sub	sp, #64	; 0x40
 8003868:	af04      	add	r7, sp, #16
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003874:	f3ef 8305 	mrs	r3, IPSR
 8003878:	61fb      	str	r3, [r7, #28]
  return(result);
 800387a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 808f 	bne.w	80039a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003882:	f3ef 8310 	mrs	r3, PRIMASK
 8003886:	61bb      	str	r3, [r7, #24]
  return(result);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800388e:	f3ef 8311 	mrs	r3, BASEPRI
 8003892:	617b      	str	r3, [r7, #20]
  return(result);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <osThreadNew+0x3e>
 800389a:	4b44      	ldr	r3, [pc, #272]	; (80039ac <osThreadNew+0x148>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d07e      	beq.n	80039a0 <osThreadNew+0x13c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d07b      	beq.n	80039a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80038ac:	2318      	movs	r3, #24
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
 80038b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d045      	beq.n	800394c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <osThreadNew+0x6a>
        name = attr->name;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <osThreadNew+0x90>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	2b38      	cmp	r3, #56	; 0x38
 80038e6:	d805      	bhi.n	80038f4 <osThreadNew+0x90>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <osThreadNew+0x94>
        return (NULL);
 80038f4:	2300      	movs	r3, #0
 80038f6:	e054      	b.n	80039a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <osThreadNew+0xca>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b5b      	cmp	r3, #91	; 0x5b
 8003916:	d90a      	bls.n	800392e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <osThreadNew+0xca>
        mem = 1;
 8003928:	2301      	movs	r3, #1
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	e010      	b.n	8003950 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <osThreadNew+0xec>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d108      	bne.n	8003950 <osThreadNew+0xec>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <osThreadNew+0xec>
          mem = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	e001      	b.n	8003950 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d110      	bne.n	8003978 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800395e:	9202      	str	r2, [sp, #8]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fe11 	bl	8004594 <xTaskCreateStatic>
 8003972:	4603      	mov	r3, r0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e013      	b.n	80039a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d110      	bne.n	80039a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	b29a      	uxth	r2, r3
 8003982:	f107 0310 	add.w	r3, r7, #16
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fe62 	bl	800465a <xTaskCreate>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <osThreadNew+0x13c>
          hTask = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039a0:	693b      	ldr	r3, [r7, #16]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3730      	adds	r7, #48	; 0x30
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200005a0 	.word	0x200005a0

080039b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a07      	ldr	r2, [pc, #28]	; (80039dc <vApplicationGetIdleTaskMemory+0x2c>)
 80039c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <vApplicationGetIdleTaskMemory+0x30>)
 80039c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200005a4 	.word	0x200005a4
 80039e0:	20000600 	.word	0x20000600

080039e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <vApplicationGetTimerTaskMemory+0x2c>)
 80039f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4a06      	ldr	r2, [pc, #24]	; (8003a14 <vApplicationGetTimerTaskMemory+0x30>)
 80039fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a02:	601a      	str	r2, [r3, #0]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	20000800 	.word	0x20000800
 8003a14:	2000085c 	.word	0x2000085c

08003a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f103 0208 	add.w	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f103 0208 	add.w	r2, r3, #8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f103 0208 	add.w	r2, r3, #8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d103      	bne.n	8003ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e00c      	b.n	8003af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3308      	adds	r3, #8
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e002      	b.n	8003ae8 <vListInsert+0x2e>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d2f6      	bcs.n	8003ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6852      	ldr	r2, [r2, #4]
 8003b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d103      	bne.n	8003b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	1e5a      	subs	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	b672      	cpsid	i
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	b662      	cpsie	i
 8003ba8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003bae:	f002 f87d 	bl	8005cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	3b01      	subs	r3, #1
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	441a      	add	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	22ff      	movs	r2, #255	; 0xff
 8003bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d114      	bne.n	8003c2e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01a      	beq.n	8003c42 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3310      	adds	r3, #16
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 f937 	bl	8004e84 <xTaskRemoveFromEventList>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d012      	beq.n	8003c42 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <xQueueGenericReset+0xd0>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	e009      	b.n	8003c42 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3310      	adds	r3, #16
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fef0 	bl	8003a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3324      	adds	r3, #36	; 0x24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff feeb 	bl	8003a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c42:	f002 f867 	bl	8005d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c46:	2301      	movs	r3, #1
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10c      	bne.n	8003c82 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	b672      	cpsid	i
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	b662      	cpsie	i
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10c      	bne.n	8003ca2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	b672      	cpsid	i
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	b662      	cpsie	i
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <xQueueGenericCreateStatic+0x5a>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <xQueueGenericCreateStatic+0x5e>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <xQueueGenericCreateStatic+0x60>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10c      	bne.n	8003cd2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	b672      	cpsid	i
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	b662      	cpsie	i
 8003ccc:	623b      	str	r3, [r7, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <xQueueGenericCreateStatic+0x8a>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <xQueueGenericCreateStatic+0x8e>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xQueueGenericCreateStatic+0x90>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10c      	bne.n	8003d02 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	b672      	cpsid	i
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	b662      	cpsie	i
 8003cfc:	61fb      	str	r3, [r7, #28]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d02:	2350      	movs	r3, #80	; 0x50
 8003d04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d00c      	beq.n	8003d26 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	b672      	cpsid	i
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	b662      	cpsie	i
 8003d20:	61bb      	str	r3, [r7, #24]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f805 	bl	8003d58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3730      	adds	r7, #48	; 0x30
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e002      	b.n	8003d7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d86:	2101      	movs	r1, #1
 8003d88:	69b8      	ldr	r0, [r7, #24]
 8003d8a:	f7ff fef9 	bl	8003b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08e      	sub	sp, #56	; 0x38
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10c      	bne.n	8003dd6 <xQueueGenericSend+0x36>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	b672      	cpsid	i
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	b662      	cpsie	i
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <xQueueGenericSend+0x44>
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <xQueueGenericSend+0x48>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <xQueueGenericSend+0x4a>
 8003de8:	2300      	movs	r3, #0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <xQueueGenericSend+0x68>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	b672      	cpsid	i
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	b662      	cpsie	i
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d103      	bne.n	8003e16 <xQueueGenericSend+0x76>
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <xQueueGenericSend+0x7a>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <xQueueGenericSend+0x7c>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10c      	bne.n	8003e3a <xQueueGenericSend+0x9a>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	b672      	cpsid	i
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	b662      	cpsie	i
 8003e34:	623b      	str	r3, [r7, #32]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e3a:	f001 f9e9 	bl	8005210 <xTaskGetSchedulerState>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <xQueueGenericSend+0xaa>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <xQueueGenericSend+0xae>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <xQueueGenericSend+0xb0>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10c      	bne.n	8003e6e <xQueueGenericSend+0xce>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	b672      	cpsid	i
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	b662      	cpsie	i
 8003e68:	61fb      	str	r3, [r7, #28]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e6e:	f001 ff1d 	bl	8005cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <xQueueGenericSend+0xe4>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d129      	bne.n	8003ed8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e8a:	f000 fa15 	bl	80042b8 <prvCopyDataToQueue>
 8003e8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d010      	beq.n	8003eba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	3324      	adds	r3, #36	; 0x24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fff1 	bl	8004e84 <xTaskRemoveFromEventList>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d013      	beq.n	8003ed0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <xQueueGenericSend+0x208>)
 8003eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	e00a      	b.n	8003ed0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <xQueueGenericSend+0x208>)
 8003ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ed0:	f001 ff20 	bl	8005d14 <vPortExitCritical>
				return pdPASS;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e063      	b.n	8003fa0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ede:	f001 ff19 	bl	8005d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e05c      	b.n	8003fa0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f82d 	bl	8004f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003efa:	f001 ff0b 	bl	8005d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003efe:	f000 fd93 	bl	8004a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f02:	f001 fed3 	bl	8005cac <vPortEnterCritical>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d103      	bne.n	8003f1c <xQueueGenericSend+0x17c>
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d103      	bne.n	8003f32 <xQueueGenericSend+0x192>
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f32:	f001 feef 	bl	8005d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f36:	1d3a      	adds	r2, r7, #4
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f81c 	bl	8004f7c <xTaskCheckForTimeOut>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d124      	bne.n	8003f94 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f4c:	f000 faac 	bl	80044a8 <prvIsQueueFull>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d018      	beq.n	8003f88 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	3310      	adds	r3, #16
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 ff3c 	bl	8004ddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f66:	f000 fa37 	bl	80043d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f6a:	f000 fd6b 	bl	8004a44 <xTaskResumeAll>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f47f af7c 	bne.w	8003e6e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <xQueueGenericSend+0x208>)
 8003f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	e772      	b.n	8003e6e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f8a:	f000 fa25 	bl	80043d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f8e:	f000 fd59 	bl	8004a44 <xTaskResumeAll>
 8003f92:	e76c      	b.n	8003e6e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f96:	f000 fa1f 	bl	80043d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f9a:	f000 fd53 	bl	8004a44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3738      	adds	r7, #56	; 0x38
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08e      	sub	sp, #56	; 0x38
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10c      	bne.n	8003fde <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	b672      	cpsid	i
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	b662      	cpsie	i
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <xQueueGenericSendFromISR+0x40>
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <xQueueGenericSendFromISR+0x44>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <xQueueGenericSendFromISR+0x46>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10c      	bne.n	8004010 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	b672      	cpsid	i
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	b662      	cpsie	i
 800400a:	623b      	str	r3, [r7, #32]
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d103      	bne.n	800401e <xQueueGenericSendFromISR+0x72>
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <xQueueGenericSendFromISR+0x76>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <xQueueGenericSendFromISR+0x78>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10c      	bne.n	8004042 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	b672      	cpsid	i
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	b662      	cpsie	i
 800403c:	61fb      	str	r3, [r7, #28]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004042:	f001 ff1b 	bl	8005e7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004046:	f3ef 8211 	mrs	r2, BASEPRI
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	b672      	cpsid	i
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	b662      	cpsie	i
 800405e:	61ba      	str	r2, [r7, #24]
 8004060:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004062:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <xQueueGenericSendFromISR+0xcc>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d12c      	bne.n	80040d2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004088:	f000 f916 	bl	80042b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800408c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d112      	bne.n	80040bc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	3324      	adds	r3, #36	; 0x24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 feee 	bl	8004e84 <xTaskRemoveFromEventList>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e007      	b.n	80040cc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040c0:	3301      	adds	r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	b25a      	sxtb	r2, r3
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040cc:	2301      	movs	r3, #1
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80040d0:	e001      	b.n	80040d6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3738      	adds	r7, #56	; 0x38
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08c      	sub	sp, #48	; 0x30
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <xQueueReceive+0x34>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	b672      	cpsid	i
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	b662      	cpsie	i
 800411a:	623b      	str	r3, [r7, #32]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <xQueueReceive+0x42>
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <xQueueReceive+0x46>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <xQueueReceive+0x48>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10c      	bne.n	8004152 <xQueueReceive+0x66>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	b672      	cpsid	i
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	b662      	cpsie	i
 800414c:	61fb      	str	r3, [r7, #28]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004152:	f001 f85d 	bl	8005210 <xTaskGetSchedulerState>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <xQueueReceive+0x76>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <xQueueReceive+0x7a>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <xQueueReceive+0x7c>
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10c      	bne.n	8004186 <xQueueReceive+0x9a>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	b672      	cpsid	i
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	b662      	cpsie	i
 8004180:	61bb      	str	r3, [r7, #24]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004186:	f001 fd91 	bl	8005cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01f      	beq.n	80041d6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419a:	f000 f8f7 	bl	800438c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00f      	beq.n	80041ce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	3310      	adds	r3, #16
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fe66 	bl	8004e84 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041be:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <xQueueReceive+0x1c8>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041ce:	f001 fda1 	bl	8005d14 <vPortExitCritical>
				return pdPASS;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e069      	b.n	80042aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041dc:	f001 fd9a 	bl	8005d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e062      	b.n	80042aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ea:	f107 0310 	add.w	r3, r7, #16
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 feae 	bl	8004f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041f8:	f001 fd8c 	bl	8005d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041fc:	f000 fc14 	bl	8004a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004200:	f001 fd54 	bl	8005cac <vPortEnterCritical>
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420a:	b25b      	sxtb	r3, r3
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d103      	bne.n	800421a <xQueueReceive+0x12e>
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004220:	b25b      	sxtb	r3, r3
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d103      	bne.n	8004230 <xQueueReceive+0x144>
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004230:	f001 fd70 	bl	8005d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004234:	1d3a      	adds	r2, r7, #4
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe9d 	bl	8004f7c <xTaskCheckForTimeOut>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d123      	bne.n	8004290 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424a:	f000 f917 	bl	800447c <prvIsQueueEmpty>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	3324      	adds	r3, #36	; 0x24
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fdbd 	bl	8004ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004264:	f000 f8b8 	bl	80043d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004268:	f000 fbec 	bl	8004a44 <xTaskResumeAll>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d189      	bne.n	8004186 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <xQueueReceive+0x1c8>)
 8004274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	e780      	b.n	8004186 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004286:	f000 f8a7 	bl	80043d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800428a:	f000 fbdb 	bl	8004a44 <xTaskResumeAll>
 800428e:	e77a      	b.n	8004186 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004292:	f000 f8a1 	bl	80043d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004296:	f000 fbd5 	bl	8004a44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800429c:	f000 f8ee 	bl	800447c <prvIsQueueEmpty>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f43f af6f 	beq.w	8004186 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3730      	adds	r7, #48	; 0x30
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10d      	bne.n	80042f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d14d      	bne.n	800437a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 ffb2 	bl	800524c <xTaskPriorityDisinherit>
 80042e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	e043      	b.n	800437a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d119      	bne.n	800432c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6858      	ldr	r0, [r3, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	461a      	mov	r2, r3
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	f002 f806 	bl	8006314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	441a      	add	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d32b      	bcc.n	800437a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	e026      	b.n	800437a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68d8      	ldr	r0, [r3, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	461a      	mov	r2, r3
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	f001 ffec 	bl	8006314 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	425b      	negs	r3, r3
 8004346:	441a      	add	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d207      	bcs.n	8004368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	425b      	negs	r3, r3
 8004362:	441a      	add	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d105      	bne.n	800437a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3b01      	subs	r3, #1
 8004378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004382:	697b      	ldr	r3, [r7, #20]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d018      	beq.n	80043d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	441a      	add	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d303      	bcc.n	80043c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68d9      	ldr	r1, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	461a      	mov	r2, r3
 80043ca:	6838      	ldr	r0, [r7, #0]
 80043cc:	f001 ffa2 	bl	8006314 <memcpy>
	}
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043e0:	f001 fc64 	bl	8005cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043ec:	e011      	b.n	8004412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d012      	beq.n	800441c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3324      	adds	r3, #36	; 0x24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd42 	bl	8004e84 <xTaskRemoveFromEventList>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004406:	f000 fe1f 	bl	8005048 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	3b01      	subs	r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	dce9      	bgt.n	80043ee <prvUnlockQueue+0x16>
 800441a:	e000      	b.n	800441e <prvUnlockQueue+0x46>
					break;
 800441c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	22ff      	movs	r2, #255	; 0xff
 8004422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004426:	f001 fc75 	bl	8005d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800442a:	f001 fc3f 	bl	8005cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004436:	e011      	b.n	800445c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d012      	beq.n	8004466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3310      	adds	r3, #16
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fd1d 	bl	8004e84 <xTaskRemoveFromEventList>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004450:	f000 fdfa 	bl	8005048 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004454:	7bbb      	ldrb	r3, [r7, #14]
 8004456:	3b01      	subs	r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800445c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004460:	2b00      	cmp	r3, #0
 8004462:	dce9      	bgt.n	8004438 <prvUnlockQueue+0x60>
 8004464:	e000      	b.n	8004468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	22ff      	movs	r2, #255	; 0xff
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004470:	f001 fc50 	bl	8005d14 <vPortExitCritical>
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004484:	f001 fc12 	bl	8005cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e001      	b.n	800449a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800449a:	f001 fc3b 	bl	8005d14 <vPortExitCritical>

	return xReturn;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044b0:	f001 fbfc 	bl	8005cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d102      	bne.n	80044c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e001      	b.n	80044ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ca:	f001 fc23 	bl	8005d14 <vPortExitCritical>

	return xReturn;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e014      	b.n	8004512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044e8:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <vQueueAddToRegistry+0x50>)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044f4:	490c      	ldr	r1, [pc, #48]	; (8004528 <vQueueAddToRegistry+0x50>)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <vQueueAddToRegistry+0x50>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800450a:	e006      	b.n	800451a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3301      	adds	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b07      	cmp	r3, #7
 8004516:	d9e7      	bls.n	80044e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000c5c 	.word	0x20000c5c

0800452c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800453c:	f001 fbb6 	bl	8005cac <vPortEnterCritical>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004546:	b25b      	sxtb	r3, r3
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d103      	bne.n	8004556 <vQueueWaitForMessageRestricted+0x2a>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455c:	b25b      	sxtb	r3, r3
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d103      	bne.n	800456c <vQueueWaitForMessageRestricted+0x40>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800456c:	f001 fbd2 	bl	8005d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3324      	adds	r3, #36	; 0x24
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fc51 	bl	8004e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff26 	bl	80043d8 <prvUnlockQueue>
	}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08e      	sub	sp, #56	; 0x38
 8004598:	af04      	add	r7, sp, #16
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10c      	bne.n	80045c2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	b672      	cpsid	i
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	b662      	cpsie	i
 80045bc:	623b      	str	r3, [r7, #32]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10c      	bne.n	80045e2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	b672      	cpsid	i
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	b662      	cpsie	i
 80045dc:	61fb      	str	r3, [r7, #28]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045e2:	235c      	movs	r3, #92	; 0x5c
 80045e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b5c      	cmp	r3, #92	; 0x5c
 80045ea:	d00c      	beq.n	8004606 <xTaskCreateStatic+0x72>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	b672      	cpsid	i
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	b662      	cpsie	i
 8004600:	61bb      	str	r3, [r7, #24]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004606:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01e      	beq.n	800464c <xTaskCreateStatic+0xb8>
 800460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01b      	beq.n	800464c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800461c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	2202      	movs	r2, #2
 8004622:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004626:	2300      	movs	r3, #0
 8004628:	9303      	str	r3, [sp, #12]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	9302      	str	r3, [sp, #8]
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f850 	bl	80046e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004646:	f000 f8df 	bl	8004808 <prvAddNewTaskToReadyList>
 800464a:	e001      	b.n	8004650 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004650:	697b      	ldr	r3, [r7, #20]
	}
 8004652:	4618      	mov	r0, r3
 8004654:	3728      	adds	r7, #40	; 0x28
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08c      	sub	sp, #48	; 0x30
 800465e:	af04      	add	r7, sp, #16
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fc48 	bl	8005f04 <pvPortMalloc>
 8004674:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800467c:	205c      	movs	r0, #92	; 0x5c
 800467e:	f001 fc41 	bl	8005f04 <pvPortMalloc>
 8004682:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
 8004690:	e005      	b.n	800469e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f001 fd00 	bl	8006098 <vPortFree>
 8004698:	e001      	b.n	800469e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	2300      	movs	r3, #0
 80046b0:	9303      	str	r3, [sp, #12]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	9302      	str	r3, [sp, #8]
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f80e 	bl	80046e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046c8:	69f8      	ldr	r0, [r7, #28]
 80046ca:	f000 f89d 	bl	8004808 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046ce:	2301      	movs	r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e002      	b.n	80046da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046da:	69bb      	ldr	r3, [r7, #24]
	}
 80046dc:	4618      	mov	r0, r3
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	461a      	mov	r2, r3
 80046fc:	21a5      	movs	r1, #165	; 0xa5
 80046fe:	f001 fe17 	bl	8006330 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800470c:	440b      	add	r3, r1
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	b672      	cpsid	i
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	b662      	cpsie	i
 800473a:	617b      	str	r3, [r7, #20]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01f      	beq.n	8004786 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e012      	b.n	8004772 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	7819      	ldrb	r1, [r3, #0]
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	3334      	adds	r3, #52	; 0x34
 800475c:	460a      	mov	r2, r1
 800475e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d006      	beq.n	800477a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	2b0f      	cmp	r3, #15
 8004776:	d9e9      	bls.n	800474c <prvInitialiseNewTask+0x68>
 8004778:	e000      	b.n	800477c <prvInitialiseNewTask+0x98>
			{
				break;
 800477a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004784:	e003      	b.n	800478e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	2b37      	cmp	r3, #55	; 0x37
 8004792:	d901      	bls.n	8004798 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004794:	2337      	movs	r3, #55	; 0x37
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800479c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	2200      	movs	r2, #0
 80047a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	3304      	adds	r3, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f952 	bl	8003a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	3318      	adds	r3, #24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f94d 	bl	8003a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	69b8      	ldr	r0, [r7, #24]
 80047e8:	f001 f952 	bl	8005a90 <pxPortInitialiseStack>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047fe:	bf00      	nop
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004810:	f001 fa4c 	bl	8005cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004814:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <prvAddNewTaskToReadyList+0xc4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <prvAddNewTaskToReadyList+0xc4>)
 800481c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800481e:	4b2c      	ldr	r3, [pc, #176]	; (80048d0 <prvAddNewTaskToReadyList+0xc8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004826:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <prvAddNewTaskToReadyList+0xc8>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800482c:	4b27      	ldr	r3, [pc, #156]	; (80048cc <prvAddNewTaskToReadyList+0xc4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d110      	bne.n	8004856 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004834:	f000 fc2c 	bl	8005090 <prvInitialiseTaskLists>
 8004838:	e00d      	b.n	8004856 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800483a:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <prvAddNewTaskToReadyList+0xcc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004842:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <prvAddNewTaskToReadyList+0xc8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	429a      	cmp	r2, r3
 800484e:	d802      	bhi.n	8004856 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004850:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <prvAddNewTaskToReadyList+0xc8>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <prvAddNewTaskToReadyList+0xd0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <prvAddNewTaskToReadyList+0xd0>)
 800485e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <prvAddNewTaskToReadyList+0xd0>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <prvAddNewTaskToReadyList+0xd4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d903      	bls.n	800487c <prvAddNewTaskToReadyList+0x74>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	4a18      	ldr	r2, [pc, #96]	; (80048dc <prvAddNewTaskToReadyList+0xd4>)
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <prvAddNewTaskToReadyList+0xd8>)
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f7ff f8ed 	bl	8003a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004898:	f001 fa3c 	bl	8005d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <prvAddNewTaskToReadyList+0xcc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <prvAddNewTaskToReadyList+0xc8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d207      	bcs.n	80048c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <prvAddNewTaskToReadyList+0xdc>)
 80048b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20001170 	.word	0x20001170
 80048d0:	20000c9c 	.word	0x20000c9c
 80048d4:	2000117c 	.word	0x2000117c
 80048d8:	2000118c 	.word	0x2000118c
 80048dc:	20001178 	.word	0x20001178
 80048e0:	20000ca0 	.word	0x20000ca0
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d019      	beq.n	800492e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <vTaskDelay+0x64>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <vTaskDelay+0x34>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	b672      	cpsid	i
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	b662      	cpsie	i
 8004916:	60bb      	str	r3, [r7, #8]
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800491c:	f000 f884 	bl	8004a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004920:	2100      	movs	r1, #0
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fd04 	bl	8005330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004928:	f000 f88c 	bl	8004a44 <xTaskResumeAll>
 800492c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d107      	bne.n	8004944 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <vTaskDelay+0x68>)
 8004936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20001198 	.word	0x20001198
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004962:	463a      	mov	r2, r7
 8004964:	1d39      	adds	r1, r7, #4
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f820 	bl	80039b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	9202      	str	r2, [sp, #8]
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	2300      	movs	r3, #0
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	460a      	mov	r2, r1
 8004982:	4923      	ldr	r1, [pc, #140]	; (8004a10 <vTaskStartScheduler+0xbc>)
 8004984:	4823      	ldr	r0, [pc, #140]	; (8004a14 <vTaskStartScheduler+0xc0>)
 8004986:	f7ff fe05 	bl	8004594 <xTaskCreateStatic>
 800498a:	4603      	mov	r3, r0
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <vTaskStartScheduler+0xc4>)
 800498e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004990:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <vTaskStartScheduler+0xc4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004998:	2301      	movs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e001      	b.n	80049a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d102      	bne.n	80049ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049a8:	f000 fd16 	bl	80053d8 <xTimerCreateTimerTask>
 80049ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d118      	bne.n	80049e6 <vTaskStartScheduler+0x92>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	b672      	cpsid	i
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	b662      	cpsie	i
 80049c8:	613b      	str	r3, [r7, #16]
}
 80049ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <vTaskStartScheduler+0xc8>)
 80049ce:	f04f 32ff 	mov.w	r2, #4294967295
 80049d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <vTaskStartScheduler+0xcc>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <vTaskStartScheduler+0xd0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049e0:	f001 f8e6 	bl	8005bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049e4:	e010      	b.n	8004a08 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d10c      	bne.n	8004a08 <vTaskStartScheduler+0xb4>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	b672      	cpsid	i
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	b662      	cpsie	i
 8004a02:	60fb      	str	r3, [r7, #12]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <vTaskStartScheduler+0xb2>
}
 8004a08:	bf00      	nop
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	08006378 	.word	0x08006378
 8004a14:	08005061 	.word	0x08005061
 8004a18:	20001194 	.word	0x20001194
 8004a1c:	20001190 	.word	0x20001190
 8004a20:	2000117c 	.word	0x2000117c
 8004a24:	20001174 	.word	0x20001174

08004a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	20001198 	.word	0x20001198

08004a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a52:	4b43      	ldr	r3, [pc, #268]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10c      	bne.n	8004a74 <xTaskResumeAll+0x30>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	b672      	cpsid	i
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	b662      	cpsie	i
 8004a6e:	603b      	str	r3, [r7, #0]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a74:	f001 f91a 	bl	8005cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004a80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d162      	bne.n	8004b50 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <xTaskResumeAll+0x120>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d05e      	beq.n	8004b50 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a92:	e02f      	b.n	8004af4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a94:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <xTaskResumeAll+0x124>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3318      	adds	r3, #24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f843 	bl	8003b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff f83e 	bl	8003b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <xTaskResumeAll+0x128>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d903      	bls.n	8004ac4 <xTaskResumeAll+0x80>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <xTaskResumeAll+0x128>)
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <xTaskResumeAll+0x12c>)
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f7fe ffc9 	bl	8003a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <xTaskResumeAll+0x130>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004aee:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <xTaskResumeAll+0x134>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <xTaskResumeAll+0x124>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1cb      	bne.n	8004a94 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b02:	f000 fb65 	bl	80051d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <xTaskResumeAll+0x138>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d010      	beq.n	8004b34 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b12:	f000 f847 	bl	8004ba4 <xTaskIncrementTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <xTaskResumeAll+0x134>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f1      	bne.n	8004b12 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <xTaskResumeAll+0x138>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b34:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <xTaskResumeAll+0x134>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <xTaskResumeAll+0x13c>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b50:	f001 f8e0 	bl	8005d14 <vPortExitCritical>

	return xAlreadyYielded;
 8004b54:	68bb      	ldr	r3, [r7, #8]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20001198 	.word	0x20001198
 8004b64:	20001170 	.word	0x20001170
 8004b68:	20001130 	.word	0x20001130
 8004b6c:	20001178 	.word	0x20001178
 8004b70:	20000ca0 	.word	0x20000ca0
 8004b74:	20000c9c 	.word	0x20000c9c
 8004b78:	20001184 	.word	0x20001184
 8004b7c:	20001180 	.word	0x20001180
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <xTaskGetTickCount+0x1c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b90:	687b      	ldr	r3, [r7, #4]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20001174 	.word	0x20001174

08004ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bae:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <xTaskIncrementTick+0x14c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 808b 	bne.w	8004cce <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb8:	4b4e      	ldr	r3, [pc, #312]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bc0:	4a4c      	ldr	r2, [pc, #304]	; (8004cf4 <xTaskIncrementTick+0x150>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d122      	bne.n	8004c12 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bcc:	4b4a      	ldr	r3, [pc, #296]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	b672      	cpsid	i
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	b662      	cpsie	i
 8004bea:	603b      	str	r3, [r7, #0]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <xTaskIncrementTick+0x4a>
 8004bf0:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3f      	ldr	r2, [pc, #252]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <xTaskIncrementTick+0x158>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b3e      	ldr	r3, [pc, #248]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	4a3d      	ldr	r2, [pc, #244]	; (8004d00 <xTaskIncrementTick+0x15c>)
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	f000 fadf 	bl	80051d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c12:	4b3c      	ldr	r3, [pc, #240]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d349      	bcc.n	8004cb0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c26:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c28:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2c:	601a      	str	r2, [r3, #0]
					break;
 8004c2e:	e03f      	b.n	8004cb0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c30:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <xTaskIncrementTick+0x154>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d203      	bcs.n	8004c50 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c48:	4a2e      	ldr	r2, [pc, #184]	; (8004d04 <xTaskIncrementTick+0x160>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c4e:	e02f      	b.n	8004cb0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fe ff69 	bl	8003b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d004      	beq.n	8004c6c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3318      	adds	r3, #24
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe ff60 	bl	8003b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d903      	bls.n	8004c80 <xTaskIncrementTick+0xdc>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4a22      	ldr	r2, [pc, #136]	; (8004d08 <xTaskIncrementTick+0x164>)
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <xTaskIncrementTick+0x168>)
 8004c8e:	441a      	add	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f7fe feeb 	bl	8003a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <xTaskIncrementTick+0x16c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d3b8      	bcc.n	8004c1c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cae:	e7b5      	b.n	8004c1c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cb0:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <xTaskIncrementTick+0x16c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb6:	4915      	ldr	r1, [pc, #84]	; (8004d0c <xTaskIncrementTick+0x168>)
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d907      	bls.n	8004cd8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e004      	b.n	8004cd8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <xTaskIncrementTick+0x170>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	4a0f      	ldr	r2, [pc, #60]	; (8004d14 <xTaskIncrementTick+0x170>)
 8004cd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <xTaskIncrementTick+0x174>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ce4:	697b      	ldr	r3, [r7, #20]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20001198 	.word	0x20001198
 8004cf4:	20001174 	.word	0x20001174
 8004cf8:	20001128 	.word	0x20001128
 8004cfc:	2000112c 	.word	0x2000112c
 8004d00:	20001188 	.word	0x20001188
 8004d04:	20001190 	.word	0x20001190
 8004d08:	20001178 	.word	0x20001178
 8004d0c:	20000ca0 	.word	0x20000ca0
 8004d10:	20000c9c 	.word	0x20000c9c
 8004d14:	20001180 	.word	0x20001180
 8004d18:	20001184 	.word	0x20001184

08004d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d22:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <vTaskSwitchContext+0xac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d2a:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <vTaskSwitchContext+0xb0>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d30:	e043      	b.n	8004dba <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <vTaskSwitchContext+0xb0>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <vTaskSwitchContext+0xb4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e012      	b.n	8004d66 <vTaskSwitchContext+0x4a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10c      	bne.n	8004d60 <vTaskSwitchContext+0x44>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	b672      	cpsid	i
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	b662      	cpsie	i
 8004d5a:	607b      	str	r3, [r7, #4]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <vTaskSwitchContext+0x42>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	491b      	ldr	r1, [pc, #108]	; (8004dd4 <vTaskSwitchContext+0xb8>)
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0e2      	beq.n	8004d40 <vTaskSwitchContext+0x24>
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <vTaskSwitchContext+0xb8>)
 8004d86:	4413      	add	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d104      	bne.n	8004daa <vTaskSwitchContext+0x8e>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <vTaskSwitchContext+0xbc>)
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <vTaskSwitchContext+0xb4>)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6013      	str	r3, [r2, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20001198 	.word	0x20001198
 8004dcc:	20001184 	.word	0x20001184
 8004dd0:	20001178 	.word	0x20001178
 8004dd4:	20000ca0 	.word	0x20000ca0
 8004dd8:	20000c9c 	.word	0x20000c9c

08004ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10c      	bne.n	8004e06 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	b672      	cpsid	i
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	b662      	cpsie	i
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e06:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <vTaskPlaceOnEventList+0x48>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3318      	adds	r3, #24
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fe fe53 	bl	8003aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e14:	2101      	movs	r1, #1
 8004e16:	6838      	ldr	r0, [r7, #0]
 8004e18:	f000 fa8a 	bl	8005330 <prvAddCurrentTaskToDelayedList>
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000c9c 	.word	0x20000c9c

08004e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	b672      	cpsid	i
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	b662      	cpsie	i
 8004e4e:	617b      	str	r3, [r7, #20]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <vTaskPlaceOnEventListRestricted+0x58>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3318      	adds	r3, #24
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7fe fe08 	bl	8003a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8004e68:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	68b8      	ldr	r0, [r7, #8]
 8004e72:	f000 fa5d 	bl	8005330 <prvAddCurrentTaskToDelayedList>
	}
 8004e76:	bf00      	nop
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000c9c 	.word	0x20000c9c

08004e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	b672      	cpsid	i
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	b662      	cpsie	i
 8004eae:	60fb      	str	r3, [r7, #12]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	3318      	adds	r3, #24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fe37 	bl	8003b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <xTaskRemoveFromEventList+0xb4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11d      	bne.n	8004f02 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fe2e 	bl	8003b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <xTaskRemoveFromEventList+0xb8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d903      	bls.n	8004ee4 <xTaskRemoveFromEventList+0x60>
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <xTaskRemoveFromEventList+0xb8>)
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <xTaskRemoveFromEventList+0xbc>)
 8004ef2:	441a      	add	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f7fe fdb9 	bl	8003a72 <vListInsertEnd>
 8004f00:	e005      	b.n	8004f0e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3318      	adds	r3, #24
 8004f06:	4619      	mov	r1, r3
 8004f08:	480e      	ldr	r0, [pc, #56]	; (8004f44 <xTaskRemoveFromEventList+0xc0>)
 8004f0a:	f7fe fdb2 	bl	8003a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <xTaskRemoveFromEventList+0xc4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d905      	bls.n	8004f28 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f20:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <xTaskRemoveFromEventList+0xc8>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e001      	b.n	8004f2c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f2c:	697b      	ldr	r3, [r7, #20]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20001198 	.word	0x20001198
 8004f3c:	20001178 	.word	0x20001178
 8004f40:	20000ca0 	.word	0x20000ca0
 8004f44:	20001130 	.word	0x20001130
 8004f48:	20000c9c 	.word	0x20000c9c
 8004f4c:	20001184 	.word	0x20001184

08004f50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <vTaskInternalSetTimeOutState+0x24>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <vTaskInternalSetTimeOutState+0x28>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	605a      	str	r2, [r3, #4]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	20001188 	.word	0x20001188
 8004f78:	20001174 	.word	0x20001174

08004f7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10c      	bne.n	8004fa6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	b672      	cpsid	i
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	b662      	cpsie	i
 8004fa0:	613b      	str	r3, [r7, #16]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10c      	bne.n	8004fc6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	b672      	cpsid	i
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	b662      	cpsie	i
 8004fc0:	60fb      	str	r3, [r7, #12]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004fc6:	f000 fe71 	bl	8005cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <xTaskCheckForTimeOut+0xc4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d102      	bne.n	8004fea <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e023      	b.n	8005032 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <xTaskCheckForTimeOut+0xc8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d007      	beq.n	8005006 <xTaskCheckForTimeOut+0x8a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	e015      	b.n	8005032 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	429a      	cmp	r2, r3
 800500e:	d20b      	bcs.n	8005028 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff97 	bl	8004f50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e004      	b.n	8005032 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800502e:	2301      	movs	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005032:	f000 fe6f 	bl	8005d14 <vPortExitCritical>

	return xReturn;
 8005036:	69fb      	ldr	r3, [r7, #28]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20001174 	.word	0x20001174
 8005044:	20001188 	.word	0x20001188

08005048 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <vTaskMissedYield+0x14>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20001184 	.word	0x20001184

08005060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005068:	f000 f852 	bl	8005110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <prvIdleTask+0x28>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d9f9      	bls.n	8005068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <prvIdleTask+0x2c>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005084:	e7f0      	b.n	8005068 <prvIdleTask+0x8>
 8005086:	bf00      	nop
 8005088:	20000ca0 	.word	0x20000ca0
 800508c:	e000ed04 	.word	0xe000ed04

08005090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005096:	2300      	movs	r3, #0
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	e00c      	b.n	80050b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <prvInitialiseTaskLists+0x60>)
 80050a8:	4413      	add	r3, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe fcb4 	bl	8003a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3301      	adds	r3, #1
 80050b4:	607b      	str	r3, [r7, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b37      	cmp	r3, #55	; 0x37
 80050ba:	d9ef      	bls.n	800509c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050bc:	480d      	ldr	r0, [pc, #52]	; (80050f4 <prvInitialiseTaskLists+0x64>)
 80050be:	f7fe fcab 	bl	8003a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050c2:	480d      	ldr	r0, [pc, #52]	; (80050f8 <prvInitialiseTaskLists+0x68>)
 80050c4:	f7fe fca8 	bl	8003a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <prvInitialiseTaskLists+0x6c>)
 80050ca:	f7fe fca5 	bl	8003a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ce:	480c      	ldr	r0, [pc, #48]	; (8005100 <prvInitialiseTaskLists+0x70>)
 80050d0:	f7fe fca2 	bl	8003a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050d4:	480b      	ldr	r0, [pc, #44]	; (8005104 <prvInitialiseTaskLists+0x74>)
 80050d6:	f7fe fc9f 	bl	8003a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <prvInitialiseTaskLists+0x78>)
 80050dc:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <prvInitialiseTaskLists+0x64>)
 80050de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <prvInitialiseTaskLists+0x7c>)
 80050e2:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <prvInitialiseTaskLists+0x68>)
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000ca0 	.word	0x20000ca0
 80050f4:	20001100 	.word	0x20001100
 80050f8:	20001114 	.word	0x20001114
 80050fc:	20001130 	.word	0x20001130
 8005100:	20001144 	.word	0x20001144
 8005104:	2000115c 	.word	0x2000115c
 8005108:	20001128 	.word	0x20001128
 800510c:	2000112c 	.word	0x2000112c

08005110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005116:	e019      	b.n	800514c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005118:	f000 fdc8 	bl	8005cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511c:	4b10      	ldr	r3, [pc, #64]	; (8005160 <prvCheckTasksWaitingTermination+0x50>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fcff 	bl	8003b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <prvCheckTasksWaitingTermination+0x54>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3b01      	subs	r3, #1
 8005134:	4a0b      	ldr	r2, [pc, #44]	; (8005164 <prvCheckTasksWaitingTermination+0x54>)
 8005136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <prvCheckTasksWaitingTermination+0x58>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3b01      	subs	r3, #1
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <prvCheckTasksWaitingTermination+0x58>)
 8005140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005142:	f000 fde7 	bl	8005d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f810 	bl	800516c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <prvCheckTasksWaitingTermination+0x58>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e1      	bne.n	8005118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20001144 	.word	0x20001144
 8005164:	20001170 	.word	0x20001170
 8005168:	20001158 	.word	0x20001158

0800516c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800517a:	2b00      	cmp	r3, #0
 800517c:	d108      	bne.n	8005190 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	4618      	mov	r0, r3
 8005184:	f000 ff88 	bl	8006098 <vPortFree>
				vPortFree( pxTCB );
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 ff85 	bl	8006098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800518e:	e01a      	b.n	80051c6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005196:	2b01      	cmp	r3, #1
 8005198:	d103      	bne.n	80051a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 ff7c 	bl	8006098 <vPortFree>
	}
 80051a0:	e011      	b.n	80051c6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d00c      	beq.n	80051c6 <prvDeleteTCB+0x5a>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	b672      	cpsid	i
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	b662      	cpsie	i
 80051c0:	60fb      	str	r3, [r7, #12]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <prvDeleteTCB+0x58>
	}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <prvResetNextTaskUnblockTime+0x38>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <prvResetNextTaskUnblockTime+0x3c>)
 80051e2:	f04f 32ff 	mov.w	r2, #4294967295
 80051e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051e8:	e008      	b.n	80051fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <prvResetNextTaskUnblockTime+0x38>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a04      	ldr	r2, [pc, #16]	; (800520c <prvResetNextTaskUnblockTime+0x3c>)
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20001128 	.word	0x20001128
 800520c:	20001190 	.word	0x20001190

08005210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <xTaskGetSchedulerState+0x34>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800521e:	2301      	movs	r3, #1
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e008      	b.n	8005236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <xTaskGetSchedulerState+0x38>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800522c:	2302      	movs	r3, #2
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	e001      	b.n	8005236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005236:	687b      	ldr	r3, [r7, #4]
	}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	2000117c 	.word	0x2000117c
 8005248:	20001198 	.word	0x20001198

0800524c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d05a      	beq.n	8005318 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005262:	4b30      	ldr	r3, [pc, #192]	; (8005324 <xTaskPriorityDisinherit+0xd8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	429a      	cmp	r2, r3
 800526a:	d00c      	beq.n	8005286 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	b672      	cpsid	i
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	b662      	cpsie	i
 8005280:	60fb      	str	r3, [r7, #12]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10c      	bne.n	80052a8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	b672      	cpsid	i
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	b662      	cpsie	i
 80052a2:	60bb      	str	r3, [r7, #8]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	1e5a      	subs	r2, r3, #1
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d02c      	beq.n	8005318 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d128      	bne.n	8005318 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe fc2e 	bl	8003b2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <xTaskPriorityDisinherit+0xdc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <xTaskPriorityDisinherit+0xac>
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <xTaskPriorityDisinherit+0xdc>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <xTaskPriorityDisinherit+0xe0>)
 8005306:	441a      	add	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f7fe fbaf 	bl	8003a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005318:	697b      	ldr	r3, [r7, #20]
	}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000c9c 	.word	0x20000c9c
 8005328:	20001178 	.word	0x20001178
 800532c:	20000ca0 	.word	0x20000ca0

08005330 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800533a:	4b21      	ldr	r3, [pc, #132]	; (80053c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005340:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3304      	adds	r3, #4
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fbf0 	bl	8003b2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d10a      	bne.n	800536a <prvAddCurrentTaskToDelayedList+0x3a>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800535a:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4819      	ldr	r0, [pc, #100]	; (80053c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005364:	f7fe fb85 	bl	8003a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005368:	e026      	b.n	80053b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	429a      	cmp	r2, r3
 8005380:	d209      	bcs.n	8005396 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7fe fb93 	bl	8003aba <vListInsert>
}
 8005394:	e010      	b.n	80053b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005396:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f7fe fb89 	bl	8003aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d202      	bcs.n	80053b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80053b2:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6013      	str	r3, [r2, #0]
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20001174 	.word	0x20001174
 80053c4:	20000c9c 	.word	0x20000c9c
 80053c8:	2000115c 	.word	0x2000115c
 80053cc:	2000112c 	.word	0x2000112c
 80053d0:	20001128 	.word	0x20001128
 80053d4:	20001190 	.word	0x20001190

080053d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053e2:	f000 fb15 	bl	8005a10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <xTimerCreateTimerTask+0x84>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d021      	beq.n	8005432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053f6:	1d3a      	adds	r2, r7, #4
 80053f8:	f107 0108 	add.w	r1, r7, #8
 80053fc:	f107 030c 	add.w	r3, r7, #12
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe faef 	bl	80039e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	9202      	str	r2, [sp, #8]
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	2302      	movs	r3, #2
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	460a      	mov	r2, r1
 8005418:	4911      	ldr	r1, [pc, #68]	; (8005460 <xTimerCreateTimerTask+0x88>)
 800541a:	4812      	ldr	r0, [pc, #72]	; (8005464 <xTimerCreateTimerTask+0x8c>)
 800541c:	f7ff f8ba 	bl	8004594 <xTaskCreateStatic>
 8005420:	4603      	mov	r3, r0
 8005422:	4a11      	ldr	r2, [pc, #68]	; (8005468 <xTimerCreateTimerTask+0x90>)
 8005424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005426:	4b10      	ldr	r3, [pc, #64]	; (8005468 <xTimerCreateTimerTask+0x90>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800542e:	2301      	movs	r3, #1
 8005430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10c      	bne.n	8005452 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	b672      	cpsid	i
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	b662      	cpsie	i
 800544c:	613b      	str	r3, [r7, #16]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005452:	697b      	ldr	r3, [r7, #20]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200011cc 	.word	0x200011cc
 8005460:	08006380 	.word	0x08006380
 8005464:	080055a9 	.word	0x080055a9
 8005468:	200011d0 	.word	0x200011d0

0800546c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10c      	bne.n	800549e <xTimerGenericCommand+0x32>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	b672      	cpsid	i
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	b662      	cpsie	i
 8005498:	623b      	str	r3, [r7, #32]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800549e:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <xTimerGenericCommand+0x9c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d02a      	beq.n	80054fc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	dc18      	bgt.n	80054ea <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054b8:	f7ff feaa 	bl	8005210 <xTaskGetSchedulerState>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d109      	bne.n	80054d6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054c2:	4b11      	ldr	r3, [pc, #68]	; (8005508 <xTimerGenericCommand+0x9c>)
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f107 0110 	add.w	r1, r7, #16
 80054ca:	2300      	movs	r3, #0
 80054cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ce:	f7fe fc67 	bl	8003da0 <xQueueGenericSend>
 80054d2:	6278      	str	r0, [r7, #36]	; 0x24
 80054d4:	e012      	b.n	80054fc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <xTimerGenericCommand+0x9c>)
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	f107 0110 	add.w	r1, r7, #16
 80054de:	2300      	movs	r3, #0
 80054e0:	2200      	movs	r2, #0
 80054e2:	f7fe fc5d 	bl	8003da0 <xQueueGenericSend>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24
 80054e8:	e008      	b.n	80054fc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <xTimerGenericCommand+0x9c>)
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f107 0110 	add.w	r1, r7, #16
 80054f2:	2300      	movs	r3, #0
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	f7fe fd59 	bl	8003fac <xQueueGenericSendFromISR>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200011cc 	.word	0x200011cc

0800550c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005516:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <prvProcessExpiredTimer+0x98>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	3304      	adds	r3, #4
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe fb01 	bl	8003b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d024      	beq.n	8005582 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	699a      	ldr	r2, [r3, #24]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	18d1      	adds	r1, r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	6978      	ldr	r0, [r7, #20]
 8005546:	f000 f8d3 	bl	80056f0 <prvInsertTimerInActiveList>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d021      	beq.n	8005594 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005550:	2300      	movs	r3, #0
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	2100      	movs	r1, #0
 800555a:	6978      	ldr	r0, [r7, #20]
 800555c:	f7ff ff86 	bl	800546c <xTimerGenericCommand>
 8005560:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d115      	bne.n	8005594 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	b672      	cpsid	i
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	b662      	cpsie	i
 800557c:	60fb      	str	r3, [r7, #12]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	b2da      	uxtb	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	4798      	blx	r3
}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	200011c4 	.word	0x200011c4

080055a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055b0:	f107 0308 	add.w	r3, r7, #8
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f857 	bl	8005668 <prvGetNextExpireTime>
 80055ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4619      	mov	r1, r3
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f803 	bl	80055cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055c6:	f000 f8d5 	bl	8005774 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055ca:	e7f1      	b.n	80055b0 <prvTimerTask+0x8>

080055cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055d6:	f7ff fa27 	bl	8004a28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f866 	bl	80056b0 <prvSampleTimeNow>
 80055e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d130      	bne.n	800564e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <prvProcessTimerOrBlockTask+0x3c>
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d806      	bhi.n	8005608 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055fa:	f7ff fa23 	bl	8004a44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff83 	bl	800550c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005606:	e024      	b.n	8005652 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <prvProcessTimerOrBlockTask+0x90>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <prvProcessTimerOrBlockTask+0x50>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <prvProcessTimerOrBlockTask+0x52>
 800561c:	2300      	movs	r3, #0
 800561e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <prvProcessTimerOrBlockTask+0x94>)
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	4619      	mov	r1, r3
 800562e:	f7fe ff7d 	bl	800452c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005632:	f7ff fa07 	bl	8004a44 <xTaskResumeAll>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <prvProcessTimerOrBlockTask+0x98>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
}
 800564c:	e001      	b.n	8005652 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800564e:	f7ff f9f9 	bl	8004a44 <xTaskResumeAll>
}
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200011c8 	.word	0x200011c8
 8005660:	200011cc 	.word	0x200011cc
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005670:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <prvGetNextExpireTime+0x44>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <prvGetNextExpireTime+0x16>
 800567a:	2201      	movs	r2, #1
 800567c:	e000      	b.n	8005680 <prvGetNextExpireTime+0x18>
 800567e:	2200      	movs	r2, #0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <prvGetNextExpireTime+0x44>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	e001      	b.n	800569c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	200011c4 	.word	0x200011c4

080056b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056b8:	f7ff fa64 	bl	8004b84 <xTaskGetTickCount>
 80056bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056be:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <prvSampleTimeNow+0x3c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d205      	bcs.n	80056d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056c8:	f000 f93c 	bl	8005944 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e002      	b.n	80056da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056da:	4a04      	ldr	r2, [pc, #16]	; (80056ec <prvSampleTimeNow+0x3c>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200011d4 	.word	0x200011d4

080056f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d812      	bhi.n	800573c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e01b      	b.n	8005762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800572a:	4b10      	ldr	r3, [pc, #64]	; (800576c <prvInsertTimerInActiveList+0x7c>)
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fe f9c0 	bl	8003aba <vListInsert>
 800573a:	e012      	b.n	8005762 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d206      	bcs.n	8005752 <prvInsertTimerInActiveList+0x62>
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d302      	bcc.n	8005752 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e007      	b.n	8005762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <prvInsertTimerInActiveList+0x80>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f7fe f9ac 	bl	8003aba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005762:	697b      	ldr	r3, [r7, #20]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	200011c8 	.word	0x200011c8
 8005770:	200011c4 	.word	0x200011c4

08005774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800577a:	e0d0      	b.n	800591e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	da1a      	bge.n	80057b8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005782:	1d3b      	adds	r3, r7, #4
 8005784:	3304      	adds	r3, #4
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10c      	bne.n	80057a8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	b672      	cpsid	i
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	b662      	cpsie	i
 80057a2:	61fb      	str	r3, [r7, #28]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ae:	6850      	ldr	r0, [r2, #4]
 80057b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b2:	6892      	ldr	r2, [r2, #8]
 80057b4:	4611      	mov	r1, r2
 80057b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f2c0 80ae 	blt.w	800591c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe f9ab 	bl	8003b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057d6:	463b      	mov	r3, r7
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff ff69 	bl	80056b0 <prvSampleTimeNow>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	f200 809b 	bhi.w	800591e <prvProcessReceivedCommands+0x1aa>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <prvProcessReceivedCommands+0x7c>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005819 	.word	0x08005819
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005819 	.word	0x08005819
 80057fc:	08005891 	.word	0x08005891
 8005800:	080058a5 	.word	0x080058a5
 8005804:	080058f3 	.word	0x080058f3
 8005808:	08005819 	.word	0x08005819
 800580c:	08005819 	.word	0x08005819
 8005810:	08005891 	.word	0x08005891
 8005814:	080058a5 	.word	0x080058a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	18d1      	adds	r1, r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005838:	f7ff ff5a 	bl	80056f0 <prvInsertTimerInActiveList>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d06d      	beq.n	800591e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005848:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d062      	beq.n	800591e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	441a      	add	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	2300      	movs	r3, #0
 8005866:	2100      	movs	r1, #0
 8005868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800586a:	f7ff fdff 	bl	800546c <xTimerGenericCommand>
 800586e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d153      	bne.n	800591e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	b672      	cpsid	i
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	b662      	cpsie	i
 800588a:	61bb      	str	r3, [r7, #24]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80058a2:	e03c      	b.n	800591e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10c      	bne.n	80058de <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	b672      	cpsid	i
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	b662      	cpsie	i
 80058d8:	617b      	str	r3, [r7, #20]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	18d1      	adds	r1, r2, r3
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ec:	f7ff ff00 	bl	80056f0 <prvInsertTimerInActiveList>
					break;
 80058f0:	e015      	b.n	800591e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f000 fbc9 	bl	8006098 <vPortFree>
 8005906:	e00a      	b.n	800591e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800591a:	e000      	b.n	800591e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800591c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <prvProcessReceivedCommands+0x1cc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	1d39      	adds	r1, r7, #4
 8005924:	2200      	movs	r2, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe fbe0 	bl	80040ec <xQueueReceive>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	f47f af24 	bne.w	800577c <prvProcessReceivedCommands+0x8>
	}
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	3730      	adds	r7, #48	; 0x30
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200011cc 	.word	0x200011cc

08005944 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800594a:	e04a      	b.n	80059e2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800594c:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <prvSwitchTimerLists+0xc4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005956:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <prvSwitchTimerLists+0xc4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3304      	adds	r3, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe f8e1 	bl	8003b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d030      	beq.n	80059e2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	429a      	cmp	r2, r3
 8005990:	d90e      	bls.n	80059b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800599e:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <prvSwitchTimerLists+0xc4>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe f886 	bl	8003aba <vListInsert>
 80059ae:	e018      	b.n	80059e2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	2100      	movs	r1, #0
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff fd56 	bl	800546c <xTimerGenericCommand>
 80059c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10c      	bne.n	80059e2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	b672      	cpsid	i
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	b662      	cpsie	i
 80059dc:	603b      	str	r3, [r7, #0]
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <prvSwitchTimerLists+0xc4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1af      	bne.n	800594c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <prvSwitchTimerLists+0xc4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <prvSwitchTimerLists+0xc8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <prvSwitchTimerLists+0xc4>)
 80059f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059fa:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <prvSwitchTimerLists+0xc8>)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	6013      	str	r3, [r2, #0]
}
 8005a00:	bf00      	nop
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200011c4 	.word	0x200011c4
 8005a0c:	200011c8 	.word	0x200011c8

08005a10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a16:	f000 f949 	bl	8005cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <prvCheckForValidListAndQueue+0x60>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d120      	bne.n	8005a64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a22:	4814      	ldr	r0, [pc, #80]	; (8005a74 <prvCheckForValidListAndQueue+0x64>)
 8005a24:	f7fd fff8 	bl	8003a18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a28:	4813      	ldr	r0, [pc, #76]	; (8005a78 <prvCheckForValidListAndQueue+0x68>)
 8005a2a:	f7fd fff5 	bl	8003a18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <prvCheckForValidListAndQueue+0x6c>)
 8005a30:	4a10      	ldr	r2, [pc, #64]	; (8005a74 <prvCheckForValidListAndQueue+0x64>)
 8005a32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a34:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <prvCheckForValidListAndQueue+0x70>)
 8005a36:	4a10      	ldr	r2, [pc, #64]	; (8005a78 <prvCheckForValidListAndQueue+0x68>)
 8005a38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <prvCheckForValidListAndQueue+0x74>)
 8005a40:	4a11      	ldr	r2, [pc, #68]	; (8005a88 <prvCheckForValidListAndQueue+0x78>)
 8005a42:	2110      	movs	r1, #16
 8005a44:	200a      	movs	r0, #10
 8005a46:	f7fe f905 	bl	8003c54 <xQueueGenericCreateStatic>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <prvCheckForValidListAndQueue+0x60>)
 8005a4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <prvCheckForValidListAndQueue+0x60>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <prvCheckForValidListAndQueue+0x60>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	490b      	ldr	r1, [pc, #44]	; (8005a8c <prvCheckForValidListAndQueue+0x7c>)
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fd3a 	bl	80044d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a64:	f000 f956 	bl	8005d14 <vPortExitCritical>
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200011cc 	.word	0x200011cc
 8005a74:	2000119c 	.word	0x2000119c
 8005a78:	200011b0 	.word	0x200011b0
 8005a7c:	200011c4 	.word	0x200011c4
 8005a80:	200011c8 	.word	0x200011c8
 8005a84:	20001278 	.word	0x20001278
 8005a88:	200011d8 	.word	0x200011d8
 8005a8c:	08006388 	.word	0x08006388

08005a90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b04      	subs	r3, #4
 8005aa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b04      	subs	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0201 	bic.w	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b04      	subs	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ac0:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <pxPortInitialiseStack+0x64>)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3b14      	subs	r3, #20
 8005aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3b04      	subs	r3, #4
 8005ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f06f 0202 	mvn.w	r2, #2
 8005ade:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3b20      	subs	r3, #32
 8005ae4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	08005af9 	.word	0x08005af9

08005af8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <prvTaskExitError+0x5c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d00c      	beq.n	8005b26 <prvTaskExitError+0x2e>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	b672      	cpsid	i
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	b662      	cpsie	i
 8005b20:	60fb      	str	r3, [r7, #12]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <prvTaskExitError+0x2c>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	b672      	cpsid	i
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	b662      	cpsie	i
 8005b3a:	60bb      	str	r3, [r7, #8]
}
 8005b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b3e:	bf00      	nop
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0fc      	beq.n	8005b40 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	2000000c 	.word	0x2000000c
	...

08005b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <pxCurrentTCBConst2>)
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	6808      	ldr	r0, [r1, #0]
 8005b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6a:	f380 8809 	msr	PSP, r0
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8811 	msr	BASEPRI, r0
 8005b7a:	4770      	bx	lr
 8005b7c:	f3af 8000 	nop.w

08005b80 <pxCurrentTCBConst2>:
 8005b80:	20000c9c 	.word	0x20000c9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b88:	4808      	ldr	r0, [pc, #32]	; (8005bac <prvPortStartFirstTask+0x24>)
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f380 8808 	msr	MSP, r0
 8005b92:	f04f 0000 	mov.w	r0, #0
 8005b96:	f380 8814 	msr	CONTROL, r0
 8005b9a:	b662      	cpsie	i
 8005b9c:	b661      	cpsie	f
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	df00      	svc	0
 8005ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005baa:	bf00      	nop
 8005bac:	e000ed08 	.word	0xe000ed08

08005bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bb6:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <xPortStartScheduler+0xe4>)
 8005bb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	4b2f      	ldr	r3, [pc, #188]	; (8005c98 <xPortStartScheduler+0xe8>)
 8005bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bde:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <xPortStartScheduler+0xec>)
 8005be0:	2207      	movs	r2, #7
 8005be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005be4:	e009      	b.n	8005bfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005be6:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <xPortStartScheduler+0xec>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <xPortStartScheduler+0xec>)
 8005bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d0ef      	beq.n	8005be6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c06:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <xPortStartScheduler+0xec>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1c3 0307 	rsb	r3, r3, #7
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d00c      	beq.n	8005c2c <xPortStartScheduler+0x7c>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	b672      	cpsid	i
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	b662      	cpsie	i
 8005c26:	60bb      	str	r3, [r7, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <xPortStartScheduler+0xec>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	4a1a      	ldr	r2, [pc, #104]	; (8005c9c <xPortStartScheduler+0xec>)
 8005c34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c36:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <xPortStartScheduler+0xec>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c3e:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <xPortStartScheduler+0xec>)
 8005c40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c4a:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <xPortStartScheduler+0xf0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <xPortStartScheduler+0xf0>)
 8005c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <xPortStartScheduler+0xf0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <xPortStartScheduler+0xf0>)
 8005c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c62:	f000 f8dd 	bl	8005e20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <xPortStartScheduler+0xf4>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c6c:	f000 f8fc 	bl	8005e68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <xPortStartScheduler+0xf8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <xPortStartScheduler+0xf8>)
 8005c76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c7c:	f7ff ff84 	bl	8005b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c80:	f7ff f84c 	bl	8004d1c <vTaskSwitchContext>
	prvTaskExitError();
 8005c84:	f7ff ff38 	bl	8005af8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	e000e400 	.word	0xe000e400
 8005c98:	200012c8 	.word	0x200012c8
 8005c9c:	200012cc 	.word	0x200012cc
 8005ca0:	e000ed20 	.word	0xe000ed20
 8005ca4:	2000000c 	.word	0x2000000c
 8005ca8:	e000ef34 	.word	0xe000ef34

08005cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	607b      	str	r3, [r7, #4]
}
 8005cc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <vPortEnterCritical+0x60>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	4a0e      	ldr	r2, [pc, #56]	; (8005d0c <vPortEnterCritical+0x60>)
 8005cd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cd4:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <vPortEnterCritical+0x60>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d111      	bne.n	8005d00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <vPortEnterCritical+0x64>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <vPortEnterCritical+0x54>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	b672      	cpsid	i
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	b662      	cpsie	i
 8005cfa:	603b      	str	r3, [r7, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <vPortEnterCritical+0x52>
	}
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	2000000c 	.word	0x2000000c
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <vPortExitCritical+0x54>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10c      	bne.n	8005d3c <vPortExitCritical+0x28>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	b672      	cpsid	i
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	b662      	cpsie	i
 8005d36:	607b      	str	r3, [r7, #4]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <vPortExitCritical+0x54>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <vPortExitCritical+0x54>)
 8005d44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d46:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <vPortExitCritical+0x54>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <vPortExitCritical+0x46>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	f383 8811 	msr	BASEPRI, r3
}
 8005d58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	2000000c 	.word	0x2000000c
 8005d6c:	00000000 	.word	0x00000000

08005d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d70:	f3ef 8009 	mrs	r0, PSP
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <pxCurrentTCBConst>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	f01e 0f10 	tst.w	lr, #16
 8005d80:	bf08      	it	eq
 8005d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8a:	6010      	str	r0, [r2, #0]
 8005d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d94:	b672      	cpsid	i
 8005d96:	f380 8811 	msr	BASEPRI, r0
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	b662      	cpsie	i
 8005da4:	f7fe ffba 	bl	8004d1c <vTaskSwitchContext>
 8005da8:	f04f 0000 	mov.w	r0, #0
 8005dac:	f380 8811 	msr	BASEPRI, r0
 8005db0:	bc09      	pop	{r0, r3}
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	6808      	ldr	r0, [r1, #0]
 8005db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	f01e 0f10 	tst.w	lr, #16
 8005dbe:	bf08      	it	eq
 8005dc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005dc4:	f380 8809 	msr	PSP, r0
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <pxCurrentTCBConst>:
 8005dd0:	20000c9c 	.word	0x20000c9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	b672      	cpsid	i
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	b662      	cpsie	i
 8005df2:	607b      	str	r3, [r7, #4]
}
 8005df4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005df6:	f7fe fed5 	bl	8004ba4 <xTaskIncrementTick>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <xPortSysTickHandler+0x44>)
 8005e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f383 8811 	msr	BASEPRI, r3
}
 8005e12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <vPortSetupTimerInterrupt+0x34>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e2a:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <vPortSetupTimerInterrupt+0x38>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <vPortSetupTimerInterrupt+0x3c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <vPortSetupTimerInterrupt+0x40>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	099b      	lsrs	r3, r3, #6
 8005e3c:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <vPortSetupTimerInterrupt+0x44>)
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e42:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <vPortSetupTimerInterrupt+0x34>)
 8005e44:	2207      	movs	r2, #7
 8005e46:	601a      	str	r2, [r3, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	e000e010 	.word	0xe000e010
 8005e58:	e000e018 	.word	0xe000e018
 8005e5c:	20000000 	.word	0x20000000
 8005e60:	10624dd3 	.word	0x10624dd3
 8005e64:	e000e014 	.word	0xe000e014

08005e68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e78 <vPortEnableVFP+0x10>
 8005e6c:	6801      	ldr	r1, [r0, #0]
 8005e6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e72:	6001      	str	r1, [r0, #0]
 8005e74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e76:	bf00      	nop
 8005e78:	e000ed88 	.word	0xe000ed88

08005e7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e82:	f3ef 8305 	mrs	r3, IPSR
 8005e86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d916      	bls.n	8005ebc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e8e:	4a19      	ldr	r2, [pc, #100]	; (8005ef4 <vPortValidateInterruptPriority+0x78>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e98:	4b17      	ldr	r3, [pc, #92]	; (8005ef8 <vPortValidateInterruptPriority+0x7c>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	7afa      	ldrb	r2, [r7, #11]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d20c      	bcs.n	8005ebc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	b672      	cpsid	i
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	b662      	cpsie	i
 8005eb6:	607b      	str	r3, [r7, #4]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <vPortValidateInterruptPriority+0x80>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <vPortValidateInterruptPriority+0x84>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d90c      	bls.n	8005ee6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	b672      	cpsid	i
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	b662      	cpsie	i
 8005ee0:	603b      	str	r3, [r7, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <vPortValidateInterruptPriority+0x68>
	}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	e000e3f0 	.word	0xe000e3f0
 8005ef8:	200012c8 	.word	0x200012c8
 8005efc:	e000ed0c 	.word	0xe000ed0c
 8005f00:	200012cc 	.word	0x200012cc

08005f04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f10:	f7fe fd8a 	bl	8004a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f14:	4b5b      	ldr	r3, [pc, #364]	; (8006084 <pvPortMalloc+0x180>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f1c:	f000 f91a 	bl	8006154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f20:	4b59      	ldr	r3, [pc, #356]	; (8006088 <pvPortMalloc+0x184>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 8092 	bne.w	8006052 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01f      	beq.n	8005f74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005f34:	2208      	movs	r2, #8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4413      	add	r3, r2
 8005f3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f023 0307 	bic.w	r3, r3, #7
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <pvPortMalloc+0x70>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	b672      	cpsid	i
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	b662      	cpsie	i
 8005f6e:	617b      	str	r3, [r7, #20]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06b      	beq.n	8006052 <pvPortMalloc+0x14e>
 8005f7a:	4b44      	ldr	r3, [pc, #272]	; (800608c <pvPortMalloc+0x188>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d866      	bhi.n	8006052 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f84:	4b42      	ldr	r3, [pc, #264]	; (8006090 <pvPortMalloc+0x18c>)
 8005f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f88:	4b41      	ldr	r3, [pc, #260]	; (8006090 <pvPortMalloc+0x18c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f8e:	e004      	b.n	8005f9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d903      	bls.n	8005fac <pvPortMalloc+0xa8>
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f1      	bne.n	8005f90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fac:	4b35      	ldr	r3, [pc, #212]	; (8006084 <pvPortMalloc+0x180>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d04d      	beq.n	8006052 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2208      	movs	r2, #8
 8005fbc:	4413      	add	r3, r2
 8005fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d921      	bls.n	800601c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4413      	add	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <pvPortMalloc+0x100>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	b672      	cpsid	i
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	b662      	cpsie	i
 8005ffe:	613b      	str	r3, [r7, #16]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	1ad2      	subs	r2, r2, r3
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006016:	69b8      	ldr	r0, [r7, #24]
 8006018:	f000 f8fe 	bl	8006218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800601c:	4b1b      	ldr	r3, [pc, #108]	; (800608c <pvPortMalloc+0x188>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	4a19      	ldr	r2, [pc, #100]	; (800608c <pvPortMalloc+0x188>)
 8006028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800602a:	4b18      	ldr	r3, [pc, #96]	; (800608c <pvPortMalloc+0x188>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b19      	ldr	r3, [pc, #100]	; (8006094 <pvPortMalloc+0x190>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d203      	bcs.n	800603e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006036:	4b15      	ldr	r3, [pc, #84]	; (800608c <pvPortMalloc+0x188>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a16      	ldr	r2, [pc, #88]	; (8006094 <pvPortMalloc+0x190>)
 800603c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	4b11      	ldr	r3, [pc, #68]	; (8006088 <pvPortMalloc+0x184>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	431a      	orrs	r2, r3
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006052:	f7fe fcf7 	bl	8004a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00c      	beq.n	800607a <pvPortMalloc+0x176>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	60fb      	str	r3, [r7, #12]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <pvPortMalloc+0x174>
	return pvReturn;
 800607a:	69fb      	ldr	r3, [r7, #28]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3728      	adds	r7, #40	; 0x28
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20004ed8 	.word	0x20004ed8
 8006088:	20004ee4 	.word	0x20004ee4
 800608c:	20004edc 	.word	0x20004edc
 8006090:	20004ed0 	.word	0x20004ed0
 8006094:	20004ee0 	.word	0x20004ee0

08006098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d04c      	beq.n	8006144 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060aa:	2308      	movs	r3, #8
 80060ac:	425b      	negs	r3, r3
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	4b23      	ldr	r3, [pc, #140]	; (800614c <vPortFree+0xb4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10c      	bne.n	80060e0 <vPortFree+0x48>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	b672      	cpsid	i
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	b662      	cpsie	i
 80060da:	60fb      	str	r3, [r7, #12]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00c      	beq.n	8006102 <vPortFree+0x6a>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	b672      	cpsid	i
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	b662      	cpsie	i
 80060fc:	60bb      	str	r3, [r7, #8]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <vPortFree+0xb4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d019      	beq.n	8006144 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d115      	bne.n	8006144 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <vPortFree+0xb4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	43db      	mvns	r3, r3
 8006122:	401a      	ands	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006128:	f7fe fc7e 	bl	8004a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4b07      	ldr	r3, [pc, #28]	; (8006150 <vPortFree+0xb8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4413      	add	r3, r2
 8006136:	4a06      	ldr	r2, [pc, #24]	; (8006150 <vPortFree+0xb8>)
 8006138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800613a:	6938      	ldr	r0, [r7, #16]
 800613c:	f000 f86c 	bl	8006218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006140:	f7fe fc80 	bl	8004a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006144:	bf00      	nop
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20004ee4 	.word	0x20004ee4
 8006150:	20004edc 	.word	0x20004edc

08006154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800615a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800615e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006160:	4b27      	ldr	r3, [pc, #156]	; (8006200 <prvHeapInit+0xac>)
 8006162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3307      	adds	r3, #7
 8006172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0307 	bic.w	r3, r3, #7
 800617a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <prvHeapInit+0xac>)
 8006184:	4413      	add	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800618c:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <prvHeapInit+0xb0>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <prvHeapInit+0xb0>)
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4413      	add	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061a0:	2208      	movs	r2, #8
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0307 	bic.w	r3, r3, #7
 80061ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <prvHeapInit+0xb4>)
 80061b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <prvHeapInit+0xb4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2200      	movs	r2, #0
 80061bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <prvHeapInit+0xb4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvHeapInit+0xb4>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4a0a      	ldr	r2, [pc, #40]	; (800620c <prvHeapInit+0xb8>)
 80061e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4a09      	ldr	r2, [pc, #36]	; (8006210 <prvHeapInit+0xbc>)
 80061ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061ec:	4b09      	ldr	r3, [pc, #36]	; (8006214 <prvHeapInit+0xc0>)
 80061ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061f2:	601a      	str	r2, [r3, #0]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	200012d0 	.word	0x200012d0
 8006204:	20004ed0 	.word	0x20004ed0
 8006208:	20004ed8 	.word	0x20004ed8
 800620c:	20004ee0 	.word	0x20004ee0
 8006210:	20004edc 	.word	0x20004edc
 8006214:	20004ee4 	.word	0x20004ee4

08006218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006220:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <prvInsertBlockIntoFreeList+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e002      	b.n	800622c <prvInsertBlockIntoFreeList+0x14>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	d8f7      	bhi.n	8006226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4413      	add	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	d108      	bne.n	800625a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	441a      	add	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d118      	bne.n	80062a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d00d      	beq.n	8006296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	441a      	add	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e008      	b.n	80062a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e003      	b.n	80062a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d002      	beq.n	80062b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20004ed0 	.word	0x20004ed0
 80062c8:	20004ed8 	.word	0x20004ed8

080062cc <__libc_init_array>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4d0d      	ldr	r5, [pc, #52]	; (8006304 <__libc_init_array+0x38>)
 80062d0:	4c0d      	ldr	r4, [pc, #52]	; (8006308 <__libc_init_array+0x3c>)
 80062d2:	1b64      	subs	r4, r4, r5
 80062d4:	10a4      	asrs	r4, r4, #2
 80062d6:	2600      	movs	r6, #0
 80062d8:	42a6      	cmp	r6, r4
 80062da:	d109      	bne.n	80062f0 <__libc_init_array+0x24>
 80062dc:	4d0b      	ldr	r5, [pc, #44]	; (800630c <__libc_init_array+0x40>)
 80062de:	4c0c      	ldr	r4, [pc, #48]	; (8006310 <__libc_init_array+0x44>)
 80062e0:	f000 f82e 	bl	8006340 <_init>
 80062e4:	1b64      	subs	r4, r4, r5
 80062e6:	10a4      	asrs	r4, r4, #2
 80062e8:	2600      	movs	r6, #0
 80062ea:	42a6      	cmp	r6, r4
 80062ec:	d105      	bne.n	80062fa <__libc_init_array+0x2e>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f4:	4798      	blx	r3
 80062f6:	3601      	adds	r6, #1
 80062f8:	e7ee      	b.n	80062d8 <__libc_init_array+0xc>
 80062fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fe:	4798      	blx	r3
 8006300:	3601      	adds	r6, #1
 8006302:	e7f2      	b.n	80062ea <__libc_init_array+0x1e>
 8006304:	080063f8 	.word	0x080063f8
 8006308:	080063f8 	.word	0x080063f8
 800630c:	080063f8 	.word	0x080063f8
 8006310:	080063fc 	.word	0x080063fc

08006314 <memcpy>:
 8006314:	440a      	add	r2, r1
 8006316:	4291      	cmp	r1, r2
 8006318:	f100 33ff 	add.w	r3, r0, #4294967295
 800631c:	d100      	bne.n	8006320 <memcpy+0xc>
 800631e:	4770      	bx	lr
 8006320:	b510      	push	{r4, lr}
 8006322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800632a:	4291      	cmp	r1, r2
 800632c:	d1f9      	bne.n	8006322 <memcpy+0xe>
 800632e:	bd10      	pop	{r4, pc}

08006330 <memset>:
 8006330:	4402      	add	r2, r0
 8006332:	4603      	mov	r3, r0
 8006334:	4293      	cmp	r3, r2
 8006336:	d100      	bne.n	800633a <memset+0xa>
 8006338:	4770      	bx	lr
 800633a:	f803 1b01 	strb.w	r1, [r3], #1
 800633e:	e7f9      	b.n	8006334 <memset+0x4>

08006340 <_init>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr

0800634c <_fini>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	bf00      	nop
 8006350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006352:	bc08      	pop	{r3}
 8006354:	469e      	mov	lr, r3
 8006356:	4770      	bx	lr
